%!PS-Adobe-3.0
%%Title: materials.py
%%For: Michael Steel
%%Creator: a2ps version 4.15.5
%%CreationDate: Wed May 22 18:03:39 2024
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 11
%%PageOrder: Ascend
%%DocumentMedia: a4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black Blue Green Red 
%%DocumentSuppliedResources: procset a2ps-color-prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988-2017 Free Software Foundation, Inc.
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  0 setgray
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.5 0.5 1 setrgbcolor
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    1 setgray
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def
%%BeginResource: procset a2ps-color-prolog 2.0 1

%% Definition of the color faces.
/p {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  0 0 0 FG
  false BG
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false BG
  false UL
  false BX
  0 0 0.9 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/K {
  false BG
  false UL
  false BX
  0 0 0.8 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/C {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/l {
  0 0 0 FG
  0.8 0.8 0 true BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/L {
  0 0 0 FG
  1 1 0 true BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/str {
  false BG
  false UL
  false BX
  0 0.5 0 FG
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  1 0 0 true BG
  false UL
  true BX
  1 1 1 FG
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul 2 div neg 0 rmoveto
    f# setfont
    0.8 0.1 0.1 FG
    c-show
  grestore
} bind def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 6 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(# materials.py is a subroutine of NumBAT that defines Material objects,) c n
(# these represent dispersive lossy refractive indices and possess) N
(# methods to interpolate n from tabulated data.) N
() p n
(# Copyright \(C\) 2017  Bjorn Sturmberg, Kokou Dossou.) c n
() p n
(# NumBAT is free software: you can redistribute it and/or modify) c n
(# it under the terms of the GNU General Public License as published by) N
(# the Free Software Foundation, either version 3 of the License, or) N
(# \(at your option\) any later version.) N
() p n
(# This program is distributed in the hope that it will be useful,) c n
(# but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the) N
(# GNU General Public License for more details.) N
() p n
(# You should have received a copy of the GNU General Public License) c n
(# along with this program. If not, see <http://www.gnu.org/licenses/>.) N
() p n
() N
(import) K
( sys) p n
(import) K
( os) p n
(import) K
( traceback) p n
(import) K
( math) p n
(import) K
( json) p n
(import) K
( re) p n
(import) K
( copy) p n
(import) K
( numpy as np) p n
(#import numpy.linalg) c n
(import) K
( tempfile) p n
(import) K
( subprocess) p n
(#import scipy.linalg) c n
() p n
(import) K
( numbattools) p n
(from) K
(  nbtypes ) p
(import) K
( unit_x, unit_y, unit_z) p n
(from) K
( bulkprops ) p
(import) K
( *) p n
() N
(import) K
( matplotlib as mpl) p n
(import) K
( matplotlib.cm as mplcm) p n
(import) K
( matplotlib.pyplot as plt) p n
(import) K
( matplotlib.colors as mplcolors) p n
(import) K
( matplotlib.ticker as ticker) p n
() N
() N
(from) K
( nbtypes ) p
(import) K
( CrystalGroup) p n
(import) K
( reporting) p n
() N
() N
(class) K
( BadMaterialFileError\(Exception\):) p n
(    ) S
(pass) K n
() p n
(        ) N
() N
(# Array that converts between 4th rank tensors in terms of x,y,z and Voigt notat) c n
(ion) N
(#               [[xx,xy,xz], [yx,yy,yz], [zx,zy,zz]]) N
(to_Voigt = np.array\([[0, 5, 4], [5, 1, 3], [4, 3, 2]]\)) p n
() N
() N
(g_material_library = None) N
() N
() N
(materials.py) (Page 1/22) (May 22, 2024 17:44) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(def) K
( make_material\(s\):) p n
(    ) S
(global) K
( g_material_library) p n
() N
(    ) S
(if) K
( g_material_library ) p
(is) K
( None:) p n
(        g_material_library = MaterialLibrary\(\)) N
() N
(    ) S
(return) K
( g_material_library.get_material\(s\)) p n
() N
() N
(def) K
( rotate_tensor_elt\(i, j, k, l, T_pqrs, mat_R\):) p n
(    ''') N
(    Calculates the element ijkl of the rotated tensor Tp from the original) str n
(    rank-4 tensor T_PQ in 6x6 Voigt notation under the rotation specified by the 3x3 matrix R.) N
(    ) S
(''') p n
() N
(    Tp_ijkl = 0) N
() N
(    ) S
(for) K
( q ) p
(in) K
( range\(3\):) p n
(        ) S
(for) K
( r ) p
(in) K
( range\(3\):) p n
(            V1 = to_Voigt[q, r]) N
(            ) S
(for) K
( s ) p
(in) K
( range\(3\):) p n
(                ) S
(for) K
( t ) p
(in) K
( range\(3\):) p n
(                    V2 = to_Voigt[s, t]) N
(                    Tp_ijkl += mat_R[i, q] * mat_R[j, r] * \\) N
(                        mat_R[k, s] * mat_R[l, t] * T_pqrs[V1, V2]) N
() N
(    ) S
(return) K
( Tp_ijkl) p n
() N
() N
(def) K
( parse_rotation_axis\(rot_axis_spec\):) p n
(    ''') S
(Convert one of several forms - string, numpy 3vec -  to a standard unit 3vec) str
(''') p n
() N
(    ) S
(if) K
( isinstance\(rot_axis_spec, str\):) p n
(        ral = rot_axis_spec.lower\(\)) N
(        ) S
(if) K
( ral ) p
(in) K
( \(') p
(x) str
(', ') p
(x-axis) str
('\):) p n
(            rot_axis = unit_x) N
(        ) S
(elif) K
( ral ) p
(in) K
( \(') p
(y) str
(', ') p
(y-axis) str
('\):) p n
(            rot_axis = unit_y) N
(        ) S
(elif) K
( ral ) p
(in) K
( \(') p
(z) str
(', ') p
(z-axis) str
('\):) p n
(            rot_axis = unit_z) N
(        ) S
(else) K
(:) p n
(            reporting.report_and_exit\() N
(                f") S
(Can't convert {rot_axis_spec} to a 3-element unit vector.) str
("\)) p n
(    ) S
(else) K
(:  ) p
(# should be a numeric 3 vector) c n
(        emsg = f") p
(Can't convert {rot_axis_spec} to a 3-element unit vector.) str
(") p n
(        ) S
(try) K
(:) p n
(            ) S
(if) K
( isinstance\(rot_axis_spec, \(tuple, list\)\):  ) p
(# try to convert to nu) c n
(mpy) N
(                rot_axis = np.array\(rot_axis_spec\)) p n
(            ) S
(elif) K
( isinstance\(rot_axis_spec, np.ndarray\):) p n
(                rot_axis = rot_axis_spec) N
(            ) S
(else) K
(:) p n
(                reporting.report_and_exit\(emsg\)) N
(        ) S
(except) K
( Exception:) p n
(            reporting.report_and_exit\(emsg\)) N
(        ) S
(if) K
( len\(rot_axis\) != 3:) p n
(            reporting.report_and_exit\() N
(                f') S
(Rotation axis {rot_axis} must have length 3.) str
('\)) p n
() N
(    nvec = np.linalg.norm\(rot_axis\)) N
(    ) S
(if) K
( numbattools.almost_zero\(nvec\):) p n
(        reporting.report_and_exit\(f') S
(Rotation axis {rot_axis} has zero length.) str
('\)) p n
(materials.py) (Page 2/22) (May 22, 2024 17:44) title
border
grestore
(Printed by Michael Steel) rhead
(materials.py) (1/11) (Wednesday May 22, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(    ) S
(return) K
( rot_axis/nvec) p n
() N
() N
(def) K
( _make_rotation_matrix\(theta, rot_axis_spec\):) p n
(    """) N
(    Return the SO\(3\) matrix corresponding to a rotation of theta radians the specified rotation_axis.) str n
(    ) S
(""") p n
() N
(    uvec = parse_rotation_axis\(rot_axis_spec\)) N
() N
(    ct = math.cos\(theta\)) N
(    st = math.sin\(theta\)) N
(    omct = 1-ct) N
(    ux, uy, uz = uvec[:]) N
() N
(    mat_R = np.array\([) N
(        [ct + ux**2*omct,  ux*uy*omct-uz*st, ux*uz*omct+uy*st],) N
(        [uy*ux*omct+uz*st, ct + uy**2*omct,  uy*uz*omct-ux*st],) N
(        [uz*ux*omct-uy*st, uz*uy*omct+ux*st, ct+uz**2*omct]) N
(    ]\)) N
() N
(    reporting.assertion\(numbattools.almost_unity\() N
(        np.linalg.det\(mat_R\)\), ') S
(Rotation matrix has unit determinant.) str
('\)) p n
() N
(    ) S
(return) K
( mat_R) p n
() N
() N
(def) K
( _rotate_3vector\(vec, mat_R\):) p n
(    ) S
(# mat_R = _make_rotation_matrix\(theta, rotation_axis\)) c n
() p n
(    vrot = 0*vec) N
(    ) S
(for) K
( i ) p
(in) K
( range\(3\):) p n
(        vrot[i] = mat_R[i, 0]*vec[0] + mat_R[i, 1]*vec[1] + mat_R[i, 2]*vec[2]) N
() N
(    ) S
(return) K
( vrot) p n
() N
() N
(def) K
( _rotate_Voigt_tensor\(T_PQ, mat_R\):) p n
(    """) N
(    Rotate an acoustic material tensor by theta radians around a specified rotation_axis.) str n
(    T_PQ is a rank-4 tensor expressed in 6x6 Voigt notation.) N
() N
(    The complete operation in 3x3x3x3 notation is) N
(    T'_ijkl  = sum_{pqrs} R_ip R_jq R_kr R_ls  T_pqrs.) N
() N
(    The result T'_ijkl is returned in Voigt format T'_PQ.) N
() N
(    Args:) N
(        T_PQ  \(array\): Tensor to be rotated.) N
() N
(        theta  \(float\): Angle to rotate by in radians.) N
() N
(        rotation_axis  \(str\): Axis around which to rotate.) N
(    ) S
(""") p n
() N
(    ) S
(# mat_R = _make_rotation_matrix\(theta, rotation_axis\)) c n
() p n
(    Tp_PQ = np.zeros\(\(6, 6\)\)) N
(    ) S
(for) K
( i ) p
(in) K
( range\(3\):) p n
(        ) S
(for) K
( j ) p
(in) K
( range\(3\):) p n
(            V1 = to_Voigt[i, j]) N
(materials.py) (Page 3/22) (May 22, 2024 17:44) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            ) p
(for) K
( k ) p
(in) K
( range\(3\):) p n
(                ) S
(for) K
( l ) p
(in) K
( range\(3\):) p n
(                    V2 = to_Voigt[k, l]) N
(                    Tp_PQ[V1, V2] = rotate_tensor_elt\(i, j, k, l, T_PQ, mat_R\)) N
() N
(    ) S
(return) K
( Tp_PQ) p n
() N
() N
() N
() N
(class) K
( VoigtTensor4\(object\):) p n
(    ''') S
(A class for representing rank 4 tensors in the compact Voigt representation.) str
(''') p n
() N
(    ) S
(def) K
( __init__\(self, material_name, symbol, src_dict=None\):) p n
(        self.mat = np.zeros\([7, 7], dtype=float\)  ) S
(# unit indexing) c n
(        self.material_name = material_name) p n
(        self.symbol = symbol  ) S
(# eg 'c', 'p', 'eta') c n
(        self.d = src_dict) p n
() N
(    ) S
(# Allow direct indexing of Voigt tensor in [\(i,j\)] form) c n
() p n
(    ) S
(def) K
( __getitem__\(self, k\):) p n
(        ) S
(return) K
( self.mat[k[0], k[1]]) p n
() N
(    ) S
(def) K
( __setitem__\(self, k, v\):) p n
(        self.mat[k[0], k[1]] = v) N
() N
(    ) S
(def) K
( __str__\(self\):) p n
() N
(        prec = np.get_printoptions\(\)[') S
(precision) str
(']) p n
(        np.set_printoptions\(precision=4\)) N
() N
(        s = f') S
(\\nVoigt tensor {self.material_name}, tensor {self.symbol}:\\n) str
(') p n
(        s += str\(self.mat[1:, 1:]\)) N
() N
(        np.set_printoptions\(precision=prec\)) N
(        ) N
(        ) S
(return) K
( s) p n
() N
(    ) S
(def) K
( dump\(self\):) p n
(        ) S
(print) K
(\(f') p
(\\nVoigt tensor {self.material_name}, tensor {self.symbol}) str
('\)) p n
(        ) S
(print) K
(\(self.mat[1:, 1:]\)) p n
() N
(    ) S
(def) K
( as_zerobase_matrix\(self\):) p n
(        ''') S
(Returns copy of Voigt matrix indexed as m[0..5, 0..5].) str
(''') p n
(        ) S
(return) K
( self.mat[1:, 1:].copy\(\)) p n
() N
(    ) S
(def) K
( read\(self, m, n, optional=False\):) p n
(        elt = f') S
({self.symbol}_{m}{n}) str
(') p n
() N
(        ) S
(if) K
( elt ) p
(not) K
( ) p
(in) K
( self.d:) p n
(            ) S
(if) K
( ) p
(not) K
( optional:) p n
(                reporting.report_and_exit\() N
(                    f') S
(Failed to read required tensor element {elt} for material {self.material_name}) str
('\)) p n
(            ) S
(else) K
(:) p n
(                ) S
(return) K
( False) p n
() N
(        self.mat[m, n] = self.d[elt]) N
(        ) S
(return) K
( True) p n
() N
(    ) S
(def) K
( load_isotropic\(self\):) p n
(        self.read\(1, 1\)) N
(materials.py) (Page 4/22) (May 22, 2024 17:44) title
border
grestore
(Printed by Michael Steel) rhead
(materials.py) (2/11) (Wednesday May 22, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        self.read\(1, 2\)) p n
(        self.read\(4, 4\)) N
(        self.set_isotropic\(self.mat[1, 1], self.mat[1, 2], self.mat[4, 4]\)) N
() N
(    ) S
(def) K
( set_isotropic\(self, m11, m12, m44\):) p n
(        ''') S
(Build Voigt matrix from 3 parameters for isotropic geometry. ) str n
(        \(Actually, only two are independent.\)) S
(''') p n
() N
(        self.mat[1, 1] = m11) N
(        self.mat[1, 2] = m12) N
(        self.mat[4, 4] = m44) N
() N
(        self.mat[2, 2] = self.mat[1, 1]) N
(        self.mat[3, 3] = self.mat[1, 1]) N
(        self.mat[5, 5] = self.mat[4, 4]) N
(        self.mat[6, 6] = self.mat[4, 4]) N
(        self.mat[2, 1] = self.mat[1, 2]) N
(        self.mat[2, 3] = self.mat[1, 2]) N
(        self.mat[1, 3] = self.mat[1, 2]) N
(        self.mat[3, 1] = self.mat[1, 2]) N
(        self.mat[3, 2] = self.mat[1, 2]) N
() N
(    ) S
(def) K
( check_symmetries\(self, sym=None\):) p n
(        ) S
(# Check matrix is symmetric and positive definite) c n
() p n
(        rtol = 1e-12) N
(        tol = rtol * np.abs\(self.mat\).max\(\)) N
(        tmat = self.mat - self.mat.T) N
(        mat_is_sym = numbattools.almost_zero\(np.linalg.norm\(tmat\), tol\)) N
(        reporting.assertion\() N
(            mat_is_sym, f') S
(Material matrix {self.material_name}-{self.symbol} is symmetric.\\n) str
(' + str) p n
(\(self.mat\)\)) N
() N
(    ) S
(def) K
( rotate\(self, matR\):) p n
(        ''') S
(Rotates the crystal according to the SO\(3\) matrix matR.) str n
(        ) S
(''') p n
() N
(        rot_tensor = _rotate_Voigt_tensor\(self.mat[1:, 1:], matR\)) N
(        self.mat[1:, 1:] = rot_tensor) N
() N
() N
(class) K
( MaterialLibrary:) p n
() N
(    ) S
(def) K
( __init__\(self\):) p n
() N
(        self._data_loc = '') N
(        self._materials = {}) N
() N
(        ) S
(# identify mat data directory:  backend/material_data) c n
(        this_dir = os.path.dirname\(os.path.realpath\(__file__\)\)) p n
(        self._data_loc = os.path.join\(this_dir, ") S
(material_data) str
(", ""\)) p n
() N
(        self._load_materials\(\)) N
() N
(    ) S
(def) K
( get_material\(self, matname\):) p n
(        ) S
(try) K
(:) p n
(            mat = self._materials[matname]) N
(        ) S
(except) K
( KeyError:) p n
(            reporting.report_and_exit\() N
(                f') S
(Material {matname} not found in material_data folder.\\nEither the material file is missing or) str n
( the name field in the material file has been incorrectly specified.) S
('\)) p n
() N
(materials.py) (Page 5/22) (May 22, 2024 17:44) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(return) K
( mat) p n
() N
(    ) S
(def) K
( _load_materials\(self\):) p n
(        ) S
(for) K
( fname ) p
(in) K
( os.listdir\(self._data_loc\):) p n
(            ) S
(if) K
( ) p
(not) K
( fname.endswith\(") p
(.json) str
("\):) p n
(                ) S
(continue) K n
() p n
(            json_data = None) N
(            with open\(self._data_loc + fname, ') S
(r) str
('\) as fin:) p n
(                s_in = ''.join\(fin.readlines\(\)\)) N
(                s_in = re.sub\(r') S
(//.*\\n) str
(', ') p
(\\n) str
(', s_in\)) p n
() N
(                ) S
(try) K
(:) p n
(                    json_data = json.loads\(s_in\)) N
(                ) S
(except) K
( Exception as err:) p n
(                    traceback.print_exc\(\)) N
(                    reporting.report_and_exit\() N
(                        f') S
(JSON parsing error: {err} for file {self.json_file}) str
('\)) p n
() N
(            ) S
(try) K
(:) p n
(                new_mat = Material\(json_data, fname\)) N
(            ) S
(except) K
( BadMaterialFileError as err:) p n
(                reporting.report_and_exit\(str\(err\)\)) N
() N
(            ) S
(if) K
( new_mat.material_name ) p
(in) K
( self._materials:) p n
(                reporting.report_and_exit\() N
(                    f") S
(Material file {fname} has the same name as an existing material {new_mat.material_n) str n
(ame}.) S
("\)) p n
() N
(            self._materials[new_mat.material_name] = new_mat) N
() N
() N
(class) K
( Material\(object\):) p n
(    """) S
(Class representing a waveguide material.) str n
() N
(    This should not be constructed directly but by calling materials.get_material\(\)) N
() N
(      Materials include the following properties and corresponding units:) N
(          -  Refractive index []) N
(          -  Density [kg/m3]) N
(          -  Stiffness tensor component [Pa]) N
(          -  Photoelastic tensor component []) N
(          -  Acoustic loss tensor component [Pa s]) N
() N
(    ) S
(""") p n
() N
(    ) S
(def) K
( __init__\(self, json_data, filename\):) p n
() N
(        ) S
(# a,b,c crystal axes according to standard conventions) c n
(        self._crystal_axes = []) p n
() N
(        self.c_tensor = None) N
(        self.eta_tensor = None) N
(        self.p_tensor = None) N
() N
(        self._parse_json_data\(json_data, filename\)) N
() N
(    ) S
(def) K
( __str__\(self\):) p n
(        s = \(f') S
(Material: {self.chemical}\\n) str
(') p n
(             f') S
(  File: {self.material_name}\\n) str
(') p n
(             f') S
(  Source: {self.author}\\n) str
(') p n
(             f') S
(  Date: {self.date}) str
(' \)) p n
(materials.py) (Page 6/22) (May 22, 2024 17:44) title
border
grestore
(Printed by Michael Steel) rhead
(materials.py) (3/11) (Wednesday May 22, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(if) K
( len\(self.comment\):) p n
(            s += f') S
(\\nComment: {self.comment}) str
(') p n
(        ) S
(return) K
( s) p n
() N
(    ) S
(def) K
( copy\(self\): ) p n
(        ) S
(return) K
( copy.deepcopy\(self\)) p n
() N
(    ) S
(def) K
( full_str\(self\):) p n
(        s = str\(self\)) N
(        s += str\(self.c_tensor\)) N
(        s += str\(self.eta_tensor\)) N
(        s += str\(self.p_tensor\)) N
(        ) S
(return) K
( s) p n
() N
(    ) S
(def) K
( elastic_properties\(self\):) p n
(        ''') S
(Returns a string containing key elastic properties of the material.) str
(''') p n
() N
(        dent = ') S
(\\n  ) str
(') p n
(        ) S
(try) K
(:) p n
(            s = f') S
(Elastic properties of material {self.material_name}) str
(') p n
(            s += dent + f') S
(Density:        {self.rho:.3f} kg/m^3) str
(') p n
(            s += dent + f') S
(Ref. index:     {self.refindex_n:.4f} ) str
(') p n
(            ) N
(            s += dent + f') S
(Crystal class:  {self.crystal.name}) str
(') p n
(            ) N
(            ) S
(if) K
( self.is_isotropic\(\):) p n
(                s += dent + f') S
(c11:            {self.c_tensor.mat[1, 1]*1e-9:.3f} GPa) str
(') p n
(                s += dent + f') S
(c12:            {self.c_tensor.mat[1, 2]*1e-9:.3f} GPa) str
(') p n
(                s += dent + f') S
(c44:            {self.c_tensor.mat[4, 4]*1e-9:.3f} GPa) str
(') p n
(                s += dent + f") S
(Young's mod E:  {self.EYoung*1e-9:.3f} GPa) str
(") p n
(                s += dent + f') S
(Poisson ratio:  {self.nuPoisson:.3f}) str
(') p n
(                s += dent + f') S
(Velocity long.: {self.Vac_longitudinal\(\):.3f} m/s) str
(') p n
(                s += dent + f') S
(Velocity shear: {self.Vac_shear\(\):.3f} m/s) str
(') p n
(            ) S
(else) K
(:) p n
(                s += dent + ') S
(Stiffness c_IJ:) str
(' + str\(self.c_tensor\) + ') p
(\\n) str
(') p n
(                ) N
(                ) S
(# find wave properties for z propagation) c n
(                v_phase, v_evecs, v_vgroup = solve_christoffel\(unit_z, self.c_te) p n
(nsor, self.rho\)) N
() N
(                with np.printoptions\(precision=4, floatmode=') S
(fixed) str
(', sign=') p
( ) str
(', sup) p n
(press=True\):) N
(                    ) S
(for) K
( m ) p
(in) K
( range\(3\):) p n
(                        vgabs = np.linalg.norm\(v_vgroup[m]\)) N
(                        s += dent + f') S
(Wave mode {m+1}: v_p={v_phase[m]:.4f} km/s,  |v_g|={vga) str n
(bs:.4f} km/s,  ) S
(' \\) p n
(                            + ') S
(u_j=) str
(' + str\(v_evecs[:,m]\) + ') p
(,  v_g=) str
(' + str\(v_vgroup) p n
([m]\) +') S
( km/s) str
(') p n
(                ) N
() N
(        ) S
(except) K
( Exception:) p n
(            s = ') S
(Unknown/undefined elastic parameters in material ) str
('+self.material_name) p n
(        ) S
(return) K
( s) p n
() N
(    ) S
(def) K
( Vac_longitudinal\(self\):) p n
(        ''') S
(For an isotropic material, returns the longitudinal \(P-wave\) elastic phase velocity.) str
(''') p n
(        assert \(self.is_isotropic\(\)\)) N
() N
(        ) S
(if) K
( ) p
(not) K
( self.rho ) p
(or) K
( self.rho == 0:  ) p
(# Catch vacuum cases) c n
(            ) p
(return) K
( 0.) p n
(        ) S
(else) K
(:) p n
(            ) S
(return) K
( math.sqrt\(self.c_tensor[1, 1]/self.rho\)) p n
(materials.py) (Page 7/22) (May 22, 2024 17:44) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(    ) S
(def) K
( Vac_shear\(self\):) p n
(        ''') S
(For an isotropic material, returns the shear \(S-wave\) elastic phase velocity.) str
(''') p n
(        assert \(self.is_isotropic\(\)\)) N
() N
(        ) S
(if) K
( ) p
(not) K
( self.rho ) p
(or) K
( self.rho == 0:  ) p
(# Catch vacuum cases) c n
(            ) p
(return) K
( 0.) p n
(        ) S
(else) K
(:) p n
(            ) S
(return) K
( math.sqrt\(self.c_tensor[4, 4]/self.rho\)) p n
() N
(    ) S
(def) K
( has_elastic_properties\(self\):) p n
(        ''') S
(Returns true if the material has at least some elastic properties defined.) str
(''') p n
(        ) S
(return) K
( self.rho ) p
(is) K
( ) p
(not) K
( None) p n
() N
(    ) S
(def) K
( _parse_json_data\(self, json_data, fname\):) p n
(        """) N
(        Load material data from json file.) str n
() N
(        Args:) N
(            data_file  \(str\): name of data file located in NumBAT/backend/material_data) N
() N
(        ) S
(""") p n
(        self._params = json_data  ) S
(# Do without this?) c n
() p n
(        ) S
(# Name of this file, will be used as identifier and must be present) c n
(        self.material_name = json_data.get\(') p
(material_name) str
(', ') p
(NOFILENAME) str
('\)) p n
(        ) S
(if) K
( self.material_name == ') p
(NOFILENAME) str
(':) p n
(            ) S
(raise) K
( BadMaterialFileError\() p n
(                f") S
(Material file {fname} has no 'material_name' field.) str
("\)) p n
() N
(        self.format = json_data.get\(') S
(format) str
(', ') p
(NOFORMAT) str
('\)) p n
(        ) S
(if) K
( self.format == ') p
(NOFORMAT) str
(':) p n
(            ) S
(raise) K
( BadMaterialFileError\() p n
(                f") S
(Material file {fname} has no 'format' field.) str
("\)) p n
() N
(        ) S
(if) K
( self.format != ') p
(NumBATMaterial-fmt-2.0) str
(':) p n
(            ) S
(raise) K
( BadMaterialFileError\() p n
(                f") S
(Material file {fname} must be in format 'NumBATMaterial-Fmt-2.0'.) str
("\)) p n
() N
(        self.chemical = json_data[') S
(chemical) str
(']  ) p
(# Chemical composition) c n
(        self.author = json_data[') p
(author) str
(']  ) p
(# Author of data) c n
(        ) p
(# Year of data publication/measurement) c n
(        self.date = json_data[') p
(date) str
(']) p n
(        ) S
(# Source institution) c n
(        self.institution = json_data[') p
(institution) str
(']) p n
(        ) S
(# doi or, failing that, the http address) c n
(        self.doi = json_data[') p
(doi) str
(']) p n
() N
(        ) S
(# general comment for any purpose) c n
(        self.comment = json_data.get\(') p
(comment) str
(', ''\)) p n
() N
(        Re_n = json_data[') S
(Re_n) str
(']  ) p
(# Real part of refractive index []) c n
(        ) p
(# Imaginary part of refractive index []) c n
(        Im_n = json_data[') p
(Im_n) str
(']) p n
(        self.refindex_n = \(Re_n + 1j*Im_n\)  ) S
(# Complex refractive index []) c n
(        self.rho = json_data[') p
(s) str
(']  ) p
(# Density [kg/m3]) c n
() p n
(        ) S
(if) K
( self.is_vacuum\(\):  ) p
(# no mechanical properties available) c n
(            ) p
(return) K n
() p n
(        self.EYoung = None) N
(        self.nuPoisson = None) N
(materials.py) (Page 8/22) (May 22, 2024 17:44) title
border
grestore
(Printed by Michael Steel) rhead
(materials.py) (4/11) (Wednesday May 22, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(        ) S
(if) K
( ) p
(not) K
( ') p
(crystal_class) str
(' ) p
(in) K
( json_data:) p n
(            ) S
(raise) K
( BadMaterialFileError\() p n
(                f") S
(Material file {fname} has no 'crystal_class' field.) str
("\)) p n
(        ) S
(try) K
(:) p n
(            self.crystal = CrystalGroup[json_data[') S
(crystal_class) str
(']]) p n
(        ) S
(except) K
( ValueError as exc:) p n
(            ) S
(print) K
(\(') p
(Unknown crystal class in material data file) str
('\)) p n
(            ) S
(raise) K
( BadMaterialFileError\() p n
(                f") S
(Unknown crystal class in material data file {fname}) str
("\) ) p
(from) K
( exc) p n
() N
(        ) S
(if) K
( self.crystal == CrystalGroup.Isotropic:) p n
(            self.construct_crystal_isotropic\(\)) N
() N
(        ) S
(else) K
(:) p n
(            self.c_tensor = VoigtTensor4\(self.material_name, ') S
(c) str
(', json_data\)) p n
(            self.eta_tensor = VoigtTensor4\() N
(                self.material_name, ') S
(eta) str
(', json_data\)) p n
(            self.p_tensor = VoigtTensor4\(self.material_name, ') S
(p) str
(', json_data\)) p n
(            ) S
(# self.load_tensors\(\)) c n
(            self.construct_crystal_anisotropic\(\)) p n
(        self._store_original_tensors\(\)) N
() N
(    ) S
(def) K
( _store_original_tensors\(self\):) p n
(        self._c_tensor_orig = self.c_tensor) N
(        self._p_tensor_orig = self.p_tensor) N
(        self._eta_tensor_orig = self.eta_tensor) N
() N
(    ) S
(def) K
( is_vacuum\(self\):) p n
(        ''') S
(Returns True if the material is the vacuum.) str
(''') p n
(        ) S
(return) K
( self.chemical == ') p
(Vacuum) str
(') p n
() N
(    ) S
(# \(don't really need this as isotropic materials are the same\)) c n
(    ) p
(def) K
( construct_crystal_cubic\(self\):) p n
() N
(        ) S
(# plain cartesian axes) c n
(        self.set_crystal_axes\(unit_x, unit_y, unit_z\)) p n
() N
(        ) S
(try) K
(:) p n
(            self.c_tensor.read\(1, 1\)) N
(            self.c_tensor.read\(1, 2\)) N
(            self.c_tensor[1, 3] = self.c_tensor[1, 2]) N
(            self.c_tensor[2, 1] = self.c_tensor[1, 2]) N
(            self.c_tensor[2, 2] = self.c_tensor[1, 1]) N
(            self.c_tensor[2, 3] = self.c_tensor[1, 2]) N
(            self.c_tensor[3, 1] = self.c_tensor[1, 2]) N
(            self.c_tensor[3, 2] = self.c_tensor[1, 2]) N
(            self.c_tensor[3, 3] = self.c_tensor[1, 1]) N
(            self.c_tensor.read\(4, 4\)) N
(            self.c_tensor[5, 5] = self.c_tensor[4, 4]) N
(            self.c_tensor[6, 6] = self.c_tensor[4, 4]) N
() N
(            self.eta_tensor.read\(1, 1\)) N
(            self.eta_tensor.read\(1, 2\)) N
(            self.eta_tensor[1, 3] = self.eta_tensor[1, 2]) N
(            self.eta_tensor[2, 1] = self.eta_tensor[1, 2]) N
(            self.eta_tensor[2, 2] = self.eta_tensor[1, 1]) N
(            self.eta_tensor[2, 3] = self.eta_tensor[1, 2]) N
(            self.eta_tensor[3, 1] = self.eta_tensor[1, 2]) N
(            self.eta_tensor[3, 2] = self.eta_tensor[1, 2]) N
(            self.eta_tensor[3, 3] = self.eta_tensor[1, 1]) N
(            self.eta_tensor.read\(4, 4\)) N
(materials.py) (Page 9/22) (May 22, 2024 17:44) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            self.eta_tensor[5, 5] = self.eta_tensor[4, 4]) p n
(            self.eta_tensor[6, 6] = self.eta_tensor[4, 4]) N
() N
(            self.p_tensor.read\(1, 1\)) N
(            self.p_tensor.read\(1, 2\)) N
() N
(            self.p_tensor[1, 3] = self.p_tensor[1, 2]) N
(            self.p_tensor[2, 1] = self.p_tensor[1, 2]) N
(            self.p_tensor[2, 2] = self.p_tensor[1, 1]) N
(            self.p_tensor[2, 3] = self.p_tensor[1, 2]) N
(            self.p_tensor[3, 1] = self.p_tensor[1, 2]) N
(            self.p_tensor[3, 2] = self.p_tensor[1, 2]) N
(            self.p_tensor[3, 3] = self.p_tensor[1, 1]) N
(            self.p_tensor.read\(4, 4\)) N
() N
(            ) S
(# According to Powell, for Oh group, these are distinct elements, bu) c n
(t no one seems to quote them) N
(            ) p
(if) K
( ) p
(not) K
( self.p_tensor.read\(5, 5, optional=True\):) p n
(                self.p_tensor[5, 5] = self.p_tensor[4, 4]) N
(            ) S
(if) K
( ) p
(not) K
( self.p_tensor.read\(6, 6, optional=True\):) p n
(                self.p_tensor[6, 6] = self.p_tensor[4, 4]) N
() N
(        ) S
(except) K
( Exception:) p n
(            reporting.report_and_exit\() N
(                f') S
(Failed to load cubic crystal class in material data file {self.json_file}) str
('\)) p n
() N
(    ) S
(def) K
( construct_crystal_trigonal\(self\):) p n
(        ) S
(# Good source for these rules is the supp info of doi:10.1364/JOSAB.4826) c n
(56 \(Gustavo surface paper\)) N
() p n
(        self.set_crystal_axes\(unit_x, unit_y, unit_z\)) N
() N
(        ) S
(try) K
(:) p n
(            ) S
(for) K
( lintens ) p
(in) K
( [self.c_tensor, self.eta_tensor]:) p n
(                ) S
(for) K
( \(i, j\) ) p
(in) K
( [\(1, 1\), \(1, 2\), \(1, 3\), \(1, 4\), \(3, 3\), \(4, 4\)]:) p n
(                    lintens.read\(i, j\)) N
() N
(                lintens[2, 1] = lintens[1, 2]) N
(                lintens[2, 2] = lintens[1, 1]) N
(                lintens[2, 3] = lintens[1, 3]) N
(                lintens[2, 4] = -lintens[1, 4]) N
() N
(                lintens[3, 1] = lintens[1, 3]) N
(                lintens[3, 2] = lintens[1, 3]) N
() N
(                lintens[4, 1] = lintens[1, 4]) N
(                lintens[4, 2] = -lintens[1, 4]) N
() N
(                lintens[5, 5] = lintens[4, 4]) N
(                lintens[5, 6] = lintens[1, 4]) N
(                lintens[6, 5] = lintens[1, 4]) N
(                lintens[6, 6] = \(lintens[1, 1]-lintens[1, 2]\)/2.0) N
() N
(            ) S
(# TODO: confirm correct symmetry properties for p.) c n
(            ) p
(# PreviouslyuUsing trigonal = C3v from Powell, now the paper above) c n
(            self.p_tensor.read\(1, 1\)) p n
(            self.p_tensor.read\(1, 2\)) N
(            self.p_tensor.read\(1, 3\)) N
(            self.p_tensor.read\(1, 4\)) N
(            self.p_tensor.read\(3, 1\)) N
(            self.p_tensor.read\(3, 3\)) N
(            self.p_tensor.read\(4, 1\)) N
(materials.py) (Page 10/22) (May 22, 2024 17:44) title
border
grestore
(Printed by Michael Steel) rhead
(materials.py) (5/11) (Wednesday May 22, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (11-12) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            self.p_tensor.read\(4, 4\)) p n
() N
(            self.p_tensor[2, 1] = self.p_tensor[1, 2]) N
(            self.p_tensor[2, 2] = self.p_tensor[1, 1]) N
(            self.p_tensor[2, 3] = self.p_tensor[1, 3]) N
(            self.p_tensor[2, 4] = -self.p_tensor[1, 4]) N
() N
(            self.p_tensor[3, 2] = self.p_tensor[3, 1]) N
() N
(            self.p_tensor[4, 2] = -self.p_tensor[4, 1]) N
() N
(            self.p_tensor[5, 5] = self.p_tensor[4, 4]) N
(            self.p_tensor[5, 6] = self.p_tensor[4, 1]) N
(            self.p_tensor[6, 5] = self.p_tensor[1, 4]) N
(            self.p_tensor[6, 6] = \(self.p_tensor[1, 1] - self.p_tensor[1, 2]\)/2) N
() N
(        ) S
(except) K
( Exception:) p n
(            reporting.report_and_exit\() N
(                f') S
(Failed to load trigonal crystal class in material data file {self.json_file}) str
('\)) p n
() N
(    ) S
(def) K
( construct_crystal_general\(self\):) p n
(        ) S
(try) K
(:  ) p
(# full anisotropic tensor components) c n
(            ) p
(for) K
( i ) p
(in) K
( range\(1, 7\):) p n
(                ) S
(for) K
( j ) p
(in) K
( range\(1, 7\):) p n
(                    self.c_tensor.read\(i, j\)) N
(                    self.p_tensor.read\(i, j\)) N
(                    self.eta_tensor.read\(i, j\)) N
() N
(        ) S
(except) K
( KeyError:) p n
(            reporting.report_and_exit\() N
(                ') S
(Failed to load anisotropic crystal class in material data file {self.json_file}) str
('\)) p n
() N
(    ) S
(def) K
( set_refractive_index\(self, nr, ni=0.0\):) p n
(        self.refindex_n = nr + 1j*ni) N
() N
(    ) S
(def) K
( is_isotropic\(self\): ) p
(return) K
( ) p
(not) K
( self._anisotropic) p n
() N
(    ) S
(# deprecated) c n
(    ) p
(def) K
( rotate_axis\(self, theta, rotation_axis, save_rotated_tensors=False\):) p n
(        reporting.register_warning\() N
(            ') S
(rotate_axis function is depprecated. Use rotate\(\)) str
('\)) p n
(        self.rotate\(theta, rotation_axis, save_rotated_tensors\)) N
() N
(    ) S
(def) K
( rotate\(self, theta, rot_axis_spec, save_rotated_tensors=False\):) p n
(        """) S
( Rotate crystal axis by theta radians.) str n
() N
(            Args:) N
(                theta  \(float\): Angle to rotate by in radians.) N
() N
(                rotate_axis  \(str\): Axis around which to rotate.) N
() N
(            Keyword Args:) N
(                save_rotated_tensors  \(bool\): Save rotated tensors to csv.) N
() N
(            Returns:) N
(                ``Material`` object with rotated tensor values.) N
(        ) S
(""") p n
() N
(        rotation_axis = parse_rotation_axis\(rot_axis_spec\)) N
(        matR = _make_rotation_matrix\(theta, rotation_axis\)) N
() N
(        self.c_tensor.rotate\(matR\)) N
(materials.py) (Page 11/22) (May 22, 2024 17:44) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        self.p_tensor.rotate\(matR\)) p n
(        self.eta_tensor.rotate\(matR\)) N
() N
(        self.c_tensor.check_symmetries\(\)) N
() N
(        caxes = self._crystal_axes.copy\(\)) N
(        self.set_crystal_axes\() N
(            _rotate_3vector\(caxes[0], matR\),) N
(            _rotate_3vector\(caxes[1], matR\),) N
(            _rotate_3vector\(caxes[2], matR\)) N
(        \)) N
() N
(        ) S
(if) K
( save_rotated_tensors:) p n
(            np.savetxt\(') S
(rotated_c_tensor.csv) str
(',) p n
(                       self.c_tensor.mat, delimiter=') S
(,) str
('\)) p n
(            np.savetxt\(') S
(rotated_p_tensor.csv) str
(',) p n
(                       self.p_tensor.mat, delimiter=') S
(,) str
('\)) p n
(            np.savetxt\(') S
(rotated_eta_tensor.csv) str
(',) p n
(                       self.eta_tensor.mat, delimiter=') S
(,) str
('\)) p n
() N
(    ) S
(# restore orientation to original axes in spec file.) c n
(    ) p
(def) K
( reset_orientation\(self\):) p n
() N
(        self.c_tensor = copy.deepcopy\(self._c_tensor_orig\)) N
(        self.p_tensor = copy.deepcopy\(self._p_tensor_orig\)) N
(        self.eta_tensor = copy.deepcopy\(self._eta_tensor_orig\)) N
() N
(        self.set_crystal_axes\(unit_x, unit_y, unit_z\)) N
() N
(    ) S
(# rotate original crystal to specific named-orientation, eg x-cut, y-cut. '1) c n
(11' etc.) N
(    ) p
(def) K
( set_orientation\(self, label\):) p n
(        self.reset_orientation\(\)) N
() N
(        ) S
(try) K
(:) p n
(            ocode = self._params[f') S
(orientation_{label.lower\(\)}) str
(']) p n
(        ) S
(except) K
( KeyError:) p n
(            reporting.report_and_exit\() N
(                f') S
(Orientation "{label}" is not defined for material {self.material_name}.) str
('\)) p n
() N
(        ) S
(if) K
( ocode == ') p
(ident) str
(':  ) p
(# native orientation is the desired one) c n
(            ) p
(return) K n
() p n
(        ) S
(try) K
(:) p n
(            ux, uy, uz, rot = map\(float, ocode.split\(') S
(,) str
('\)\)) p n
(        ) S
(except) K
(:) p n
(            reporting.report_and_exit\() N
(                f") S
(Can't parse crystal orientation code {ocode} for material {self.material_name}.) str
("\)) p n
(        rot_axis = np.array\(\(ux, uy, uz\)\)) N
(        theta = rot*np.pi/180) N
() N
(        self.rotate\(theta, rot_axis\)) N
() N
(    ) S
(def) K
( set_crystal_axes\(self, va, vb, vc\):) p n
(        self._crystal_axes = [va, vb, vc]) N
() N
(    ) S
(def) K
( construct_crystal_isotropic\(self\):) p n
(        ) S
(# ordinary Cartesian axes for the crystal axes) c n
(        self.set_crystal_axes\(unit_x, unit_y, unit_z\)) p n
() N
(        self._anisotropic = False) N
() N
(materials.py) (Page 12/22) (May 22, 2024 17:44) title
border
grestore
(Printed by Michael Steel) rhead
(materials.py) (6/11) (Wednesday May 22, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (13-14) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(# Try to read isotropic from stiffness and then from Young's modulus and) c n
( Poisson ratio) N
(        ) p
(if) K
( ') p
(c_11) str
(' ) p
(in) K
( self._params ) p
(and) K
( ') p
(c_12) str
(' ) p
(in) K
( self._params ) p
(and) K
( ') p
(c_44) str
(' ) p
(in) K
( self._p) p n
(arams:) N
(            self.c_tensor = VoigtTensor4\(self.material_name, ') S
(c) str
(', self._params\)) p n
(            self.c_tensor.load_isotropic\(\)) N
(            mu = self.c_tensor.mat[4, 4]) N
(            lam = self.c_tensor.mat[1, 2]) N
(            r = lam/mu) N
(            self.nuPoisson = 0.5*r/\(1+r\)) N
(            self.EYoung = 2*mu*\(1+self.nuPoisson\)) N
() N
(        ) S
(elif) K
( ') p
(EYoung) str
(' ) p
(in) K
( self._params ) p
(and) K
( ') p
(nuPoisson) str
(' ) p
(in) K
( self._params:) p n
(            self.EYoung = self._params[') S
(EYoung) str
(']) p n
(            self.nuPoisson = self._params[') S
(nuPoisson) str
(']) p n
(            c44 = 0.5*self.EYoung/\(1+self.nuPoisson\)) N
(            c12 = self.EYoung*self.nuPoisson / \\) N
(                \(\(1+self.nuPoisson\) * \(1-2*self.nuPoisson\)\)) N
(            c11 = c12+2*c44) N
(            self.c_tensor = VoigtTensor4\(self.material_name, ') S
(c) str
('\)) p n
(            self.c_tensor.set_isotropic\(c11, c12, c44\)) N
(        ) S
(else) K
(:) p n
(            reporting.report_and_exit\() N
(                ') S
(Broken isotropic material file:) str
(' + self.json_file\)) p n
() N
(        self.eta_tensor = VoigtTensor4\(self.material_name,) N
(                                       ') S
(eta) str
(', self._params\)) p n
(        self.p_tensor = VoigtTensor4\(self.material_name, ') S
(p) str
(', self._params\)) p n
() N
(        self.p_tensor.load_isotropic\(\)) N
(        self.eta_tensor.load_isotropic\(\)) N
() N
(        self.c_tensor.check_symmetries\(\)) N
() N
(    ) S
(# not do this unless symmetry is off?) c n
(    ) p
(def) K
( construct_crystal_anisotropic\(self\):) p n
() N
(        self.c_tensor = VoigtTensor4\(self.material_name, ') S
(c) str
(', self._params\)) p n
(        self.eta_tensor = VoigtTensor4\(self.material_name, ') S
(eta) str
(', self._params\)) p n
(        self.p_tensor = VoigtTensor4\(self.material_name, ') S
(p) str
(', self._params\)) p n
() N
(        self._anisotropic = True) N
() N
(        ) S
(# TODO: change to match/case) c n
(        ) p
(if) K
( self.crystal == CrystalGroup.Trigonal:) p n
(            self.construct_crystal_trigonal\(\)) N
(        ) S
(elif) K
( self.crystal == CrystalGroup.Cubic:) p n
(            self.construct_crystal_cubic\(\)) N
(        ) S
(elif) K
( self.crystal == CrystalGroup.GeneralAnisotropic:) p n
(            self.construct_crystal_general\(\)) N
() N
(        self.c_tensor.check_symmetries\(\)) N
() N
() N
(    ) S
(def) K
( _add_3d_dispersion_curves_to_axes\(self, ax_ivp=None, ax_vg=None\):) p n
(        ) N
() N
(        axs = []) N
(        ) S
(if) K
( ax_ivp ) p
(is) K
( ) p
(not) K
( None: axs.append\(ax_ivp\)) p n
(        ) S
(if) K
( ax_vg ) p
(is) K
( ) p
(not) K
( None: axs.append\(ax_vg\)) p n
(        ) N
(        ) S
(# Make data) c n
(materials.py) (Page 13/22) (May 22, 2024 17:44) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        tpts = 50) p n
(        ppts = 100) N
(        vphi = np.linspace\(0, 2 * np.pi, ppts\)) N
(        vtheta = np.linspace\(0, np.pi, tpts\)) N
() N
(        ivx = np.zeros\([tpts, ppts, 3]\)) N
(        ivy = np.zeros\([tpts, ppts, 3]\)) N
(        ivz = np.zeros\([tpts, ppts, 3]\)) N
() N
(        ivgx = np.zeros\([tpts, ppts, 3]\)) N
(        ivgy = np.zeros\([tpts, ppts, 3]\)) N
(        ivgz = np.zeros\([tpts, ppts, 3]\)) N
() N
(        ) S
(for) K
( ip, phi ) p
(in) K
( enumerate\(vphi\):) p n
(            ) S
(for) K
( itheta, theta ) p
(in) K
( enumerate\(vtheta\):) p n
(                vkap = np.array\([np.sin\(theta\)*np.cos\(phi\),) N
(                                 np.sin\(theta\)*np.sin\(phi\),) N
(                                 np.cos\(theta\)]\)) N
(                v_vphase, vecs, v_vgroup = solve_christoffel\(vkap, self.c_tensor) N
(, self.rho\)) N
() N
(                ) S
(# slowness curve  eta\(vkap\) = 1/v_phase\(vkap\)) c n
(                ivx[itheta, ip, :] = vkap[0]/v_vphase) p n
(                ivy[itheta, ip, :] = vkap[1]/v_vphase) N
(                ivz[itheta, ip, :] = vkap[2]/v_vphase) N
(                ) N
() N
(                ivgx[itheta, ip, :] = v_vgroup[:, 0]) N
(                ivgy[itheta, ip, :] = v_vgroup[:, 1]) N
(                ivgz[itheta, ip, :] = v_vgroup[:, 2]) N
(             ) N
(           ) N
(        ) S
(for) K
( i ) p
(in) K
( range\(3\):) p n
(            ) S
(if) K
( ax_ivp:) p n
(                ax_ivp.plot_surface\(ivx[:, :, i], ivy[:, :, i], ivz[:, :, i], al) N
(pha=.25\)) N
() N
(            ) S
(if) K
( ax_vg:) p n
(                ax_vg.plot_surface\(ivgx[:, :, i], ivgy[:, :, i], ivgz[:, :, i], ) N
(alpha=.25\)) N
() N
(        ) N
(        ) S
(if) K
( ax_ivp:) p n
(            ax_ivp.set_xlabel\(r') S
($1/v_x^{\(p\)}$ [s/km]) str
(', fontsize=8, labelpad=1\)) p n
(            ax_ivp.set_ylabel\(r') S
($1/v_y^{\(p\)}$ [s/km]) str
(', fontsize=8, labelpad=1\)) p n
(            ax_ivp.set_zlabel\(r') S
($1/v_z^{\(p\)}$ [s/km]) str
(', fontsize=8, labelpad=1\)) p n
(        ) S
(if) K
( ax_vg:) p n
(            ax_vg.set_xlabel\(r') S
($v_x^{\(g\)}$ [km/s]) str
(', fontsize=8, labelpad=1\)) p n
(            ax_vg.set_ylabel\(r') S
($v_y^{\(g\)}$ [km/s]) str
(', fontsize=8, labelpad=1\)) p n
(            ax_vg.set_zlabel\(r') S
($v_z^{\(g\)}$ [km/s]) str
(', fontsize=8, labelpad=1\)) p n
(            ) N
() N
(        ) S
(for) K
( ax ) p
(in) K
( axs:) p n
(            ) S
(for) K
( a ) p
(in) K
( \(') p
(x) str
(', ') p
(y) str
(', ') p
(z) str
('\):) p n
(                ax.tick_params\(axis=a, labelsize=8, pad=0\)) N
(            ) S
(for) K
( t_ax ) p
(in) K
( [ax.xaxis, ax.yaxis, ax.zaxis]:) p n
(                t_ax.line.set_linewidth\(.5\)) N
(        ) N
(            ) S
(#ax.set_aspect\('equal'\)) c n
() p n
(    ) S
(def) K
( plot_bulk_dispersion_3D\(self, pref, label=None\):) p n
(        ''') N
(materials.py) (Page 14/22) (May 22, 2024 17:44) title
border
grestore
(Printed by Michael Steel) rhead
(materials.py) (7/11) (Wednesday May 22, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (15-16) 8
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        Generate isocontour surfaces of the bulk dispersion in 3D k-space.) str n
(        ) S
(''') p n
() N
(        fig, axs = plt.subplots\(1,2, subplot_kw={') S
(projection) str
(':') p
(3d) str
('}\)) p n
(        ax_vp, ax_vg = axs) N
() N
() N
(        self._add_3d_dispersion_curves_to_axes\(ax_vp, ax_vg\)) N
(    ) N
() N
(        plt.savefig\(pref+') S
(-bulkdisp3D.png) str
('\)) p n
() N
(    ) S
(def) K
( plot_bulk_dispersion\(self, pref, label=None\):) p n
(        ''') S
(Draw slowness surface 1/v_p\(kappa\) and ray surface contours in the horizontal \(x-z\) plane for the crys) str n
(tal axes current orientation.) N
(        ) N
(        Solving the Christoffel equation: D C D^T u = -\\rho v_p^2 u, for eigenvalue v_p and eigengector u.) N
(        C is the Voigt form stiffness.) N
(        D = [) N
(        [kapx  0   0   0  kapz  kapy  ]) N
(        [0   kapy  0   kapz 0   kapx  ]) N
(        [0   0   kapz  kapy kapx  0]] where kap=\(cos phi, 0, sin phi\).) N
() N
(        ) S
(''') p n
() N
(        fig, axs = setup_bulk_dispersion_2D_plot\(\)) N
() N
(        ax_sl, ax_vp, ax_vg, ax_ivp_3d = axs) N
(            ) N
(        cm = ') S
(cool) str
('  ) p
(# Color map for polarisation coding) c n
(        self._add_bulk_slowness_curves_to_axes\(pref, fig, ax_sl, ax_vp, ax_vg, c) p n
(m\)) N
() N
(        ) S
(if) K
( label ) p
(is) K
( None:) p n
(            label = self.material_name) N
(        ax_sl.text\(-0.1, 1.1, label, fontsize=14, style=') S
(italic) str
(', transform=ax_sl.) p n
(transAxes\)) N
() N
(        self._add_3d_dispersion_curves_to_axes\(ax_ivp_3d\)) N
(            ) N
(        plt.savefig\(pref+') S
(-bulkdisp.png) str
('\)) p n
() N
(    ) S
(def) K
( _add_bulk_slowness_curves_to_axes\(self, pref, fig, ax_sl, ax_vp, ax_vg, ) p n
(cm\):) N
() N
(        npolpts = 28) N
(        npolskip = 10  ) S
(#make bigger) c n
(        npts = npolpts*npolskip  ) p
(# about 1000) c n
(        v_kphi = np.linspace\(0., np.pi*2, npts\)) p n
(        v_vel = np.zeros\([npts, 3]\)) N
(        v_velc = np.zeros\([npts, 3]\)) N
(        v_vgx = np.zeros\([npts, 3]\)) N
(        v_vgz = np.zeros\([npts, 3]\)) N
(        ) N
() N
(        cmm = mpl.colormaps[cm]) N
(        with open\(pref+') S
(-bulkdisp.dat) str
(', ') p
(w) str
('\) as fout:) p n
() N
(            fout.write\(') S
(#phi    kapx     kapz       vl           vs1           vs2           vlx      vly      vlz     vs1x    vs) str n
(1y     vs1z     vs2x    vs2y      vs2z    k.v1    k.v2   k.v3\\n) S
('\)) p n
() N
(            kapcomp = np.zeros\(3\)) N
(materials.py) (Page 15/22) (May 22, 2024 17:44) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            ycomp = np.zeros\(3\)) p n
(            ) S
(for) K
( ik, kphi ) p
(in) K
( enumerate\(v_kphi\):) p n
(                ) S
(#kapx = np.cos\(kphi\)) c n
(                ) p
(#kapz = np.sin\(kphi\)) c n
(                ) p
(#kapy = 0.0) c n
(                vkap = np.array\([np.cos\(kphi\), 0.0, np.sin\(kphi\)]\)) p n
() N
(                fout.write\(f') S
({kphi:.4f}  {vkap[0]:+.4f}  {vkap[2]:+.4f}  ) str
('\)) p n
() N
() N
(                ) S
(# solve_christoffel returns:) c n
(                ) p
(# eigvecs are sorted by phase velocity) c n
(                ) p
(# v_vphase[m]:   |vphase| of modes m=1 to 3) c n
(                ) p
(# vecs[:,m]:     evecs of modes m=1 to 3) c n
(                ) p
(# v_vgroup[m,:]  vgroup of mode m, second index is x,y,z) c n
(                v_vphase, vecs, v_vgroup = solve_christoffel\(vkap, self.c_tensor) p n
(, self.rho\)) N
() N
(                v_vel[ik, :] = v_vphase    ) S
(# phase velocity) c n
(                v_vgx[ik, :] = v_vgroup[:,0]  ) p
(# group velocity components) c n
(                v_vgz[ik, :] = v_vgroup[:,2]) p n
() N
(                ycomp = np.abs\(vecs[1,:]\)                  ) S
(# $\\unity \\cdot u_i$) c n
(                kapcomp = np.abs\(np.matmul\(vkap, vecs\)\)  ) p
(# component of vkap alo) c n
(ng each evec) N
(                v_velc[ik, :] = kapcomp    ) p
(# phase velocity color by polarisatio) c n
(n) N
(                ) p n
() N
(                ) S
(for) K
( iv ) p
(in) K
( range\(3\):) p n
(                    fout.write\(f') S
({v_vphase[iv]*1000:10.4f}  ) str
('\)) p n
(                ) S
(for) K
( iv ) p
(in) K
( range\(3\):) p n
(                    fout.write\(f') S
({vecs[0,iv]:7.4f}  {vecs[1,iv]:7.4f}   {vecs[2,iv]:7.4f}  ) str
('\)) p n
(                fout.write\(f') S
({kapcomp[0]:6.4f}  {kapcomp[1]:6.4f} {kapcomp[2]:6.4f}) str
('\)) p n
() N
(                fout.write\(') S
(\\n) str
('\)) p n
() N
(                ) S
(# Draw polarisation ball and stick notations) c n
(                irad = 0.07/v_vel[0, 0]  ) p
(# length of polarisation sticks) c n
(                rad = 0.07*v_vel[0, 0]  ) p
(# length of polarisation sticks) c n
(                lwstick = .9) p n
(                srad = 5  ) S
(# diameter of polarisation dots) c n
(                ) p
(if) K
( ik % npolskip == 0: ) p n
() N
(                    ) S
(for) K
( i ) p
(in) K
( range\(3\):) p n
(                        radsl = 1/v_vel[ik, i]) N
(                        radvp = v_vel[ik, i]) N
(                        polc = cmm\(kapcomp[i]\)) N
(                        polc = ') S
(k) str
('  ) p
(# all black for now) c n
() p n
(                        ptm = radsl*np.array\([np.cos\(kphi\), np.sin\(kphi\)]\)) N
(                        pt0 = np.real\(ptm - vecs[0:3:2, i]*irad\)) N
(                        pt1 = np.real\(ptm + vecs[0:3:2, i]*irad\)) N
(                        ax_sl.plot\(\(pt0[0], pt1[0]\), \(pt0[1], pt1[1]\), c=polc, l) N
(w=lwstick\)) N
(                        ax_sl.plot\(ptm[0], ptm[1], ') S
(o) str
(', c=polc, markersize=srad*) p n
(ycomp[i]\)) N
() N
(                        ptm = radvp*np.array\([np.cos\(kphi\), np.sin\(kphi\)]\)) N
(                        pt0 = np.real\(ptm - vecs[0:3:2, i]*rad\)) N
(                        pt1 = np.real\(ptm + vecs[0:3:2, i]*rad\)) N
(                        ) N
(materials.py) (Page 16/22) (May 22, 2024 17:44) title
border
grestore
(Printed by Michael Steel) rhead
(materials.py) (8/11) (Wednesday May 22, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (17-18) 9
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                        ax_vp.plot\(\(pt0[0], pt1[0]\), \(pt0[1], pt1[1]\), c=polc, l) p n
(w=lwstick\)) N
(                        ax_vp.plot\(ptm[0], ptm[1], ') S
(o) str
(', c=polc, markersize=srad*) p n
(ycomp[i]\)) N
() N
(        ) S
(# the main curves for 1/v_p and v_g) c n
(        ) p
(for) K
( i ) p
(in) K
( range\(3\):) p n
(            ax_sl.scatter\(np.cos\(v_kphi\)/v_vel[:, i], np.sin\(v_kphi\) /) N
(                       v_vel[:, i], c=v_velc[:, i], vmin=0, vmax=1, s=0.5, cmap=) N
(cm\)) N
() N
(            ax_vp.scatter\(np.cos\(v_kphi\)*v_vel[:, i], np.sin\(v_kphi\) *) N
(                       v_vel[:, i], c=v_velc[:, i], vmin=0, vmax=1, s=0.5, cmap=) N
(cm\)) N
() N
(            ax_vg.scatter\(v_vgx[:,i], v_vgz[:,i],  c=v_velc[:, i], vmin=0, vmax=) N
(1, s=0.5, cmap=cm\)) N
() N
(        ) S
(# Tick location seems to need help here) c n
(        ) p
(for) K
( tax ) p
(in) K
( [ax_vp.xaxis, ax_vp.yaxis, ax_vg.xaxis, ax_vg.yaxis]:) p n
(            tax.set_major_locator\(ticker.MultipleLocator\(2.0, offset=0\)\)) N
(        ) N
(        make_axes_square\(np.abs\(1/v_vel\).max\(\), ax_sl\)) N
(        make_axes_square\(np.abs\(v_vel\).max\(\), ax_vp\)) N
(        make_axes_square\(max\(np.abs\(v_vgx\).max\(\), np.abs\(v_vgz\).max\(\)\), ax_vg\)) N
(        ) N
(        ) S
(#fig.colorbar\(mplcm.ScalarMappable\(cmap=cm\), ax=ax_vp, shrink=.5,) c n
(        ) p
(#             pad=.025, location='top', label='$\\hat{e} \\cdot \\hat{\\kapp) c n
(a}$'\)) N
() p n
() N
() N
(    ) S
(def) K
( _add_bulk_slowness_curves_to_axes_2x1\(self, pref, fig, ax_sl, ax_vp, cm,) p n
( mat1) S
(or) K
(2\):) p n
() N
(        npolpts = 28) N
(        npolskip = 10  ) S
(#make bigger) c n
(        npts = npolpts*npolskip  ) p
(# about 1000) c n
(        v_kphi = np.linspace\(0., np.pi*2, npts\)) p n
(        v_vel = np.zeros\([npts, 3]\)) N
(        v_velc = np.zeros\([npts, 3]\)) N
(        v_vgx = np.zeros\([npts, 3]\)) N
(        v_vgz = np.zeros\([npts, 3]\)) N
(        ) N
() N
(        cmm = mpl.colormaps[cm]) N
(        ) N
(        kapcomp = np.zeros\(3\)) N
(        ycomp = np.zeros\(3\)) N
(        ) S
(for) K
( ik, kphi ) p
(in) K
( enumerate\(v_kphi\):) p n
(            vkap = np.array\([np.cos\(kphi\), 0.0, np.sin\(kphi\)]\)) N
() N
() N
(            ) S
(# solve_christoffel returns:) c n
(            ) p
(# eigvecs are sorted by phase velocity) c n
(            ) p
(# v_vphase[m]:   |vphase| of modes m=1 to 3) c n
(            ) p
(# vecs[:,m]:     evecs of modes m=1 to 3) c n
(            ) p
(# v_vgroup[m,:]  vgroup of mode m, second index is x,y,z) c n
(            v_vphase, vecs, v_vgroup = solve_christoffel\(vkap, self.c_tensor, se) p n
(lf.rho\)) N
() N
(            v_vel[ik, :] = v_vphase    ) S
(# phase velocity) c n
(materials.py) (Page 17/22) (May 22, 2024 17:44) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            ) p
(#v_vgx[ik, :] = v_vgroup[:,0]  # group velocity components) c n
(            ) p
(#v_vgz[ik, :] = v_vgroup[:,2]) c n
() p n
(            ycomp = np.abs\(vecs[1,:]\)                  ) S
(# $\\unity \\cdot u_i$) c n
(            kapcomp = np.abs\(np.matmul\(vkap, vecs\)\)  ) p
(# component of vkap along e) c n
(ach evec) N
(            v_velc[ik, :] = kapcomp    ) p
(# phase velocity color by polarisation) c n
(            ) p n
() N
(            ) N
(            ) S
(# Draw polarisation ball and stick notations) c n
(            irad = 0.07/v_vel[0, 0]  ) p
(# length of polarisation sticks) c n
(            rad = 0.07*v_vel[0, 0]  ) p
(# length of polarisation sticks) c n
(            lwstick = .9) p n
(            srad = 5  ) S
(# diameter of polarisation dots) c n
(            ) p
(if) K
( ik % npolskip == 0: ) p n
() N
(                ) S
(for) K
( i ) p
(in) K
( range\(3\):) p n
(                    radsl = 1/v_vel[ik, i]) N
(                    radvp = v_vel[ik, i]) N
(                    polc = cmm\(kapcomp[i]\)) N
(                    polc = ') S
(k) str
('  ) p
(# all black for now) c n
() p n
(                    ptm = radsl*np.array\([np.cos\(kphi\), np.sin\(kphi\)]\)) N
(                    pt0 = np.real\(ptm - vecs[0:3:2, i]*irad\)) N
(                    pt1 = np.real\(ptm + vecs[0:3:2, i]*irad\)) N
(                    ax_sl.plot\(\(pt0[0], pt1[0]\), \(pt0[1], pt1[1]\), c=polc, lw=lw) N
(stick\)) N
(                    ax_sl.plot\(ptm[0], ptm[1], ') S
(o) str
(', c=polc, markersize=srad*ycom) p n
(p[i]\)) N
() N
(                    ptm = radvp*np.array\([np.cos\(kphi\), np.sin\(kphi\)]\)) N
(                    pt0 = np.real\(ptm - vecs[0:3:2, i]*rad\)) N
(                    pt1 = np.real\(ptm + vecs[0:3:2, i]*rad\)) N
(                    ) N
(                    ) S
(#ax_vp.plot\(\(pt0[0], pt1[0]\), \(pt0[1], pt1[1]\), c=polc, lw=l) c n
(wstick\)) N
(                    ) p
(#ax_vp.plot\(ptm[0], ptm[1], 'o', c=polc, markersize=srad*yco) c n
(mp[i]\)) N
() p n
(        ) S
(# the main curves for 1/v_p and v_g) c n
(        ) p
(for) K
( i ) p
(in) K
( range\(3\):) p n
(            ax_sl.scatter\(np.cos\(v_kphi\)/v_vel[:, i], np.sin\(v_kphi\) /) N
(                        v_vel[:, i], c=v_velc[:, i], vmin=0, vmax=1, s=0.5, cmap) N
(=cm\)) N
() N
(            ) S
(#ax_vp.scatter\(np.cos\(v_kphi\)*v_vel[:, i], np.sin\(v_kphi\) *) c n
(            ) p
(#            v_vel[:, i], c=v_velc[:, i], vmin=0, vmax=1, s=0.5, cma) c n
(p=cm\)) N
() p n
(            ) S
(#ax_vg.scatter\(v_vgx[:,i], v_vgz[:,i],  c=v_velc[:, i], vmin=0, vmax) c n
(=1, s=0.5, cmap=cm\)) N
() p n
(        ) S
(# Tick location seems to need help here) c n
(        ) p
(#for tax in [ax_vp.xaxis, ax_vp.yaxis, ax_vg.xaxis, ax_vg.yaxis]:) c n
(         ) p
(#   tax.set_major_locator\(ticker.MultipleLocator\(2.0, offset=0\)\)) c n
(        ) p n
(        make_axes_square\(np.abs\(1/v_vel\).max\(\), ax_sl\)) N
(        ) S
(#make_axes_square\(np.abs\(v_vel\).max\(\), ax_vp\)) c n
(        ) p
(#make_axes_square\(max\(np.abs\(v_vgx\).max\(\), np.abs\(v_vgz\).max\(\)\), ax_vg\)) c n
(        ) p n
(        cbar=fig.colorbar\(mplcm.ScalarMappable\(cmap=cm\), ax=ax_sl, shrink=.5,) N
(materials.py) (Page 18/22) (May 22, 2024 17:44) title
border
grestore
(Printed by Michael Steel) rhead
(materials.py) (9/11) (Wednesday May 22, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (19-20) 10
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                     pad=.025, location=') p
(right) str
('\)) p n
(        cbar.ax.tick_params\(labelsize=6, width=.25\)) N
(        ) N
(        cbar.outline.set_linewidth\(1\)) N
(        cbar.set_label\(label=f') S
(Mat {mat1or2} ) str
(' +') p
($\\hat{e} \\cdot \\hat{\\kappa}$) str
(', fontsize=10\)) p n
(        ) N
() N
(    ) S
(def) K
( make_crystal_axes_plot\(self, pref\):) p n
(        ''') S
(Build crystal coordinates diagram using call to external asymptote application.) str
(''') p n
() N
(        fn = tempfile.NamedTemporaryFile\() N
(            suffix=') S
(.asy) str
(', mode=') p
(w+t) str
(', delete=False\)) p n
() N
(        asy_cmds = asy_draw_crystal_axes\(self._crystal_axes\)) N
(        fn.write\(asy_cmds\)) N
(        fn.close\(\)) N
() N
(        ) S
(# run .asy) c n
(        subprocess.run\([') p
(asy) str
(', fn.name, ') p
(-o) str
(', f') p
({pref}-crystal) str
(']\)) p n
() N
() N
(def) K
( setup_bulk_dispersion_2D_plot\(\):) p n
(    ''') S
(Plots both slowness and ray normal contours.) str
(''') p n
(    ) N
(    fig, axs = plt.subplots\(2,2, figsize=\(7,6\)\)) N
(    fig.subplots_adjust\(hspace=.35, wspace=0\)) N
(    ) N
(    ax_sl, ax_vp, ax_vg = axs[0,0], axs[0,1], axs[1,0] ) N
() N
(    axs[1,1].set_axis_off\(\)  ) S
(# Hide axis 2,2) c n
() p n
(    axs[1,1].remove\(\)) N
(    ax_ivp3d = fig.add_subplot\(2,2,4, projection=') S
(3d) str
('\)) p n
(    ax_sl.set_xlabel\(r') S
($1/v^{\(p\)}_{x}$ [s/km]) str
('\)) p n
(    ax_sl.set_ylabel\(r') S
($1/v^{\(p\)}_{z}$ [s/km]) str
('\)) p n
(    ax_vp.set_xlabel\(r') S
($v^{\(p\)}_{x}$ [s/km]) str
('\)) p n
(    ax_vp.set_ylabel\(r') S
($v^{\(p\)}_{z}$ [s/km]) str
('\)) p n
(    ax_vg.set_xlabel\(r') S
($v^{\(g\)}_{x}$ [km/s]) str
('\)) p n
(    ax_vg.set_ylabel\(r') S
($v^{\(g\)}_{z}$ [km/s]) str
('\)) p n
(    ) N
(    ) S
(for) K
( ax ) p
(in) K
( axs.flat[:3]:  ) p
(# Don't write to axis 2,2) c n
(        ax.axhline\(0, c=') p
(gray) str
(', lw=.5\)) p n
(        ax.axvline\(0, c=') S
(gray) str
(', lw=.5\)) p n
(        ax.tick_params\(width=.5\)) N
(        ) S
(for) K
( item ) p
(in) K
( \([ax.title, ax.xaxis.label, ax.yaxis.label] +) p n
(             ax.get_xticklabels\(\) + ax.get_yticklabels\(\)\):) N
(                item.set_fontsize\(10\)) N
(        ) S
(for) K
( t_ax ) p
(in) K
( [') p
(top) str
(',') p
(bottom) str
(',') p
(left) str
(',') p
(right) str
(']: ax.spines[t_ax].set_linewidth\(.5) p n
(\)) N
(    axs = ax_sl, ax_vp, ax_vg, ax_ivp3d    ) N
(    ) S
(return) K
( fig, axs) p n
() N
() N
(def) K
( setup_bulk_dispersion_2D_plot_2x1\(\):) p n
(    ''') S
(Plots both slowness and ray normal contours.) str
(''') p n
(    ) N
(    fig, axs = plt.subplots\(1,1, figsize=\(6,4\)\)) N
(    ) S
(#fig.subplots_adjust\(hspace=.35, wspace=0\)) c n
(    axs = axs,) p n
(    ) S
(#ax_sl, ax_vg = axs) c n
(    ax_sl = axs[0]) p n
(    ) N
(materials.py) (Page 19/22) (May 22, 2024 17:44) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    ) p
(#ax_sl, ax_vp, ax_vg = axs[0,0], axs[0,1], axs[1,0] ) c n
() p n
(    ) S
(#axs[1,1].set_axis_off\(\)  # Hide axis 2,2) c n
() p n
(    ) S
(#axs[1,1].remove\(\)) c n
(    ) p
(#ax_ivp3d = fig.add_subplot\(2,2,4, projection='3d'\)) c n
(    ax_sl.set_xlabel\(r') p
($1/v^{\(p\)}_{x}$ [s/km]) str
('\)) p n
(    ax_sl.set_ylabel\(r') S
($1/v^{\(p\)}_{z}$ [s/km]) str
('\)) p n
(    ) S
(#ax_vp.set_xlabel\(r'$v^{\(p\)}_{x}$ [s/km]'\)) c n
(    ) p
(#ax_vp.set_ylabel\(r'$v^{\(p\)}_{z}$ [s/km]'\)) c n
(    ) p
(#ax_vg.set_xlabel\(r'$v^{\(g\)}_{x}$ [km/s]'\)) c n
(    ) p
(#ax_vg.set_ylabel\(r'$v^{\(g\)}_{z}$ [km/s]'\)) c n
(    ) p n
(    ) S
(for) K
( ax ) p
(in) K
( axs:  ) p
(# Don't write to axis 2,2) c n
(        ax.axhline\(0, c=') p
(gray) str
(', lw=.5\)) p n
(        ax.axvline\(0, c=') S
(gray) str
(', lw=.5\)) p n
(        ax.tick_params\(width=.5\)) N
(        ) S
(for) K
( item ) p
(in) K
( \([ax.title, ax.xaxis.label, ax.yaxis.label] +) p n
(             ax.get_xticklabels\(\) + ax.get_yticklabels\(\)\):) N
(                item.set_fontsize\(12\)) N
(        ) S
(for) K
( t_ax ) p
(in) K
( [') p
(top) str
(',') p
(bottom) str
(',') p
(left) str
(',') p
(right) str
(']: ax.spines[t_ax].set_linewidth\(.5) p n
(\)) N
(    ) S
(#axs = ax_sl, ax_vp, ax_vg, ax_ivp3d    ) c n
(    ) p
(return) K
( fig, axs) p n
() N
() N
(def) K
( compare_bulk_dispersion\(mat1, mat2, pref\):) p n
(    fig, axs = setup_bulk_dispersion_2D_plot_2x1\(\)) N
() N
(    ) S
(#ax_sl, ax_vg = axs ) c n
(    ax_sl=axs[0]) p n
(    ax_vg=None) N
(    ) N
(    cm1 = ') S
(cool) str
('  ) p
(# Color map for polarisation coding) c n
(    cm2 = ') p
(autumn) str
('  ) p
(# Color map for polarisation coding) c n
() p n
(    mat1._add_bulk_slowness_curves_to_axes_2x1\(pref+') S
(_mat1) str
(', fig, ax_sl, ax_vg, ) p n
(cm1, 1\)) N
(    mat2._add_bulk_slowness_curves_to_axes_2x1\(pref+') S
(_mat2) str
(', fig, ax_sl, ax_vg, ) p n
(cm2, 2\)) N
() N
(    ax_sl.text\(0.05, 1.15, f') S
(Mat 1: {mat1.material_name}) str
(', fontsize=14, style=') p
(italic) str
(',) p n
(            transform=ax_sl.transAxes\)) N
(    ax_sl.text\(0.05, 1.05, f') S
(Mat 2: {mat2.material_name}) str
(', fontsize=14, style=') p
(italic) str
(',) p n
(            transform=ax_sl.transAxes\)) N
() N
(    plt.savefig\(pref+') S
(-compare-bulkdisp.png) str
('\)) p n
() N
() N
(def) K
( isotropic_stiffness\(E, v\):) p n
(    """) N
(    Calculate the stiffness matrix components of isotropic) str n
(    materials, given the two free parameters.) N
() N
(    Ref: www.efunda.com/formulae/solid_mechanics/mat_mechanics/hooke_isotropic.cfm) N
() N
(    Args:) N
(        E  \(float\): Youngs modulus) N
() N
(        v  \(float\): Poisson ratio) N
(    ) S
(""") p n
(    c_11 = E*\(1-v\)/\(\(1+v\)*\(1-2*v\)\)) N
(materials.py) (Page 20/22) (May 22, 2024 17:44) title
border
grestore
(Printed by Michael Steel) rhead
(materials.py) (10/11) (Wednesday May 22, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (21-22) 11
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    c_12 = E*\(v\)/\(\(1+v\)*\(1-2*v\)\)) p n
(    c_44 = \(E*\(1-2*v\)/\(\(1+v\)*\(1-2*v\)\)\)/2) N
() N
(    ) S
(return) K
( c_11, c_12, c_44) p n
() N
() N
(def) K
( asy_draw_crystal_axes\(crystal_axes\):) p n
() N
(    \(va, vb, vc\) = crystal_axes) N
(    s_avec = ') S
(\() str
('+') p
(,) str
('.join\(map\(str, va\)\)+') p
(\)) str
(') p n
(    s_bvec = ') S
(\() str
('+') p
(,) str
('.join\(map\(str, vb\)\)+') p
(\)) str
(') p n
(    s_cvec = ') S
(\() str
('+') p
(,) str
('.join\(map\(str, vc\)\)+') p
(\)) str
(') p n
() N
(    s1 = ''') N
(settings.outformat=) str
('png') p
(;) str n
(settings.render=8;) N
(import three;) N
(import graph3;) N
() N
(size\(2cm,0\);) N
(defaultpen\(fontsize\(7pt\)\);) N
(defaultpen\(.2\);) N
() N
(real axlen=1.25;) N
(int arrsize=3;) N
(real blen=.5;) N
() N
(//currentprojection=orthographic\(1,1,1\);) N
(currentprojection=oblique;) N
() N
() N
(draw\(O--2X, black, Arrow3\(arrsize\), L=Label\("$\\hat{x}$", position=EndPoint\)\);) N
(draw\(O--2Y, black, Arrow3\(arrsize\), L=Label\("$\\hat{y}$", position=EndPoint\)\);) N
(draw\(O--3Z, black, Arrow3\(arrsize\), L=Label\("$\\hat{z}$", position=EndPoint\)\);) N
() N
(draw\(O-- -2X, gray\);) N
(draw\(O-- -2Y, gray\);) N
(draw\(O-- -2Z, gray\);) N
() N
() N
(//label\("$\\hat{x}$", 3X*1.1\);) N
(//label\("$\\hat{y}$", 3Y*1.1\);) N
(//label\("$\\hat{z}$", 3Z*1.1\);) N
() N
(draw\(box\(\(-1,-.5,-2\)*blen,\(1,.5,2\)*blen\),blue\);) N
(''') p n
() N
(    s2 = f''') S
(triple avec={s_avec};) str n
(triple bvec={s_bvec};) N
(triple cvec={s_cvec};) N
(''') p n
() N
(    s3 = ''') S
(triple corig=\(0,.5,2\)*blen;) str n
(draw\(corig--avec+corig, red, Arrow3\(arrsize\), L=Label\("$c_x$", position=EndPoint\)\);) N
(draw\(corig--bvec+corig, red, Arrow3\(arrsize\), L=Label\("$c_y$", position=EndPoint\)\);) N
(draw\(corig--cvec+corig, red, Arrow3\(arrsize\), L=Label\("$c_z$", position=EndPoint\)\);) N
() N
(triple k0=\(1,-1,-1\);) N
(triple k1=k0+\(0,0,2\);) N
() N
(draw\(k0--k1,green, Arrow3\(arrsize\), L=Label\("$k$"\)\);) N
(''') p n
(materials.py) (Page 21/22) (May 22, 2024 17:44) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(    ) S
(return) K
( s1 + s2 + s3) p n
() N
(def) K
( make_axes_square\(ext0, ax\):) p n
(    ext = 1.1*ext0) N
(    ax.set_xlim\(-ext, ext\)) N
(    ax.set_ylim\(-ext, ext\)) N
(    ax.set_aspect\(') S
(equal) str
('\)) p
(materials.py) (Page 22/22) (May 22, 2024 17:44) title
border
grestore
(Printed by Michael Steel) rhead
(materials.py) (11/11) (Wednesday May 22, 2024) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
