# Windows Makefile for NumBAT. May require some adjustment to reflect your installation.


RM=del /q
MKDIR=mkdir

# Intel compilers
F_COMP_EXE = ifx
C_COMP_EXE = icx

NumBAT_MOD=nb_fortran
all: $(NumBAT_MOD).dll

# Location of System Python (virtual envs don't contain Python.h, so we grab it from here)
SYSTEMPY = C:\Users\mq98002769\AppData\Local\anaconda3
SYSTEMPYINC= $(SYSTEMPY)\include
SYSTEMPYLIB= $(SYSTEMPY)\libs\python311.lib

# Set your python virtualenv platform
PY_VENV = c:\users\mq98002769\mypy3-11
PYVERMAJ=3
PYVERMAJMIN=3.11



# Location of support libraries: SuiteSparse etc
# Think of this as a linux /usr/local
NB_USRLOCAL = C:\Users\mq98002769\numbat\usr_local

UMFPACK_INC = /I $(NB_USRLOCAL)\include
UMFPACK_LIB = $(NB_USRLOCAL)\lib\libumfpack.lib $(NB_USRLOCAL)\lib\libcholmod.lib \
	$(NB_USRLOCAL)\lib\libamd.lib $(NB_USRLOCAL)\lib\suitesparseconfig.lib

PYROOT = $(PY_VENV)
PYBIN = $(PYROOT)\Scripts
F2PY = $(PYBIN)\f2py

#Make these nicer.  Are they not in the virtual env $(PYROOT) tree?
#PYPACKAGES = C:\Users\mq98002769\AppData\Local\anaconda3\pkgs\numpy-base-1.24.3-py311hd01c5d8_1\Lib\site-packages\numpy\f2py\src
PYBASEINC=C:\Users\mq98002769\AppData\Local\anaconda3\pkgs\python-3.11.8-he1021f5_0\include

#NUMPYDIR = $(PYPACKAGES)\numpy
NUMPY_SYS=C:\Users\mq98002769\AppData\Local\anaconda3\pkgs\numpy-base-1.24.3-py311hd01c5d8_1\Lib\site-packages\numpy
NUMPY_SYSINC = /I $(NUMPY_SYS)\core\include

#PYINC = /I $(PYBASEINC) /I $(NUMPYDIR)\core\include /I $(NUMPYDIR)\f2py\src\ /I $(SYSTEMPYINC)
#PYINC = /I $(SYSTEMPYINC) /I $(NUMPYDIR)\core\include
NUMPY_VENV = $(PY_VENV)\Lib\site-packages\numpy
NUMPY_VINC = /I $(NUMPY_VENV)\core\include

#$(NUMPY_SYSINCB) # don't need?
PYINC = /I $(SYSTEMPYINC) $(NUMPY_VINC)

ONEAPI="C:\Program Files (x86)\Intel\oneAPI"
MKLROOT=$(ONEAPI)\mkl\latest
MKL_INCL=/I $(MKLROOT)\include

MKL_LIB=$(MKLROOT)\lib\mkl_lapack95_lp64.lib $(MKLROOT)\lib\mkl_blas95_lp64.lib $(MKLROOT)\lib\mkl_rt.lib
MKL_LIB=$(MKLROOT)\lib\mkl_intel_lp64.lib $(MKLROOT)\lib\mkl_rt.lib \
	$(MKLROOT)\lib\mkl_core_dll.lib  $(MKLROOT)\lib\mkl_intel_thread_dll.lib


ARPACK_INC =
ARPACK_LIB = $(NB_USRLOCAL)\lib\arpack.lib

#MATH_INC = $(ARPACK_INC)
MATHLIB = $(ARPACK_LIB) $(UMFPACK_LIB) $(MKL_LIB)




SRCS_F = $(wildcard src/*.f)
SRCS_F90 = $(wildcard src/*.f90)
#OBJSA = $(SRCS_F:.f=.obj) $(SRCS_F90:.f90=.obj)
#OBJS = $(subst src/,build\,$(OBJSA))
OBJS = $(subst src/,build\,$(SRCS_F:.f=.obj) $(SRCS_F90:.f90=.obj))


# The build order of these matters
SRCS_MODS = src\numbatmod_module.f90 src\stopwatch_module.f90
#src\nbinterfaces_module.f90
#SRCS_MODS = $(wildcard src/*_module.f90)
#OBJS_MODA = $(SRCS_MODS:.f90=.obj)
#MODULES_MODS = build\numbatmod_module.mod build\nbinterfaces_module.mod
MODULES_MODS = $(subst src\,build\,$(SRCS_MODS:.f90=.mod))


# Files that contain functions directly callable from Python.
# It must be possible to shorten this
PYINTERFACE_SRCS_IN = pyinterfaces.f90 conv_gmsh.f90 \
	em_mode_energy_int_v2_ez.f em_mode_energy_int_ez.f em_mode_e_energy_int.f \
	h_mode_field_ez.f \
	ac_mode_power_int.f ac_mode_power_int_v2.f ac_mode_power_int_v4.f \
	ac_mode_elastic_energy_int.f ac_mode_elastic_energy_int_v4.f \
	ac_alpha_int.f ac_alpha_int_v2.f  \
	array_size.f90 array_material_ac.f \
	photoelastic_int.f photoelastic_int_v2.f moving_boundary.f \
	py_entry_cm.f90


PYINTERFACE_SRCS = $(addprefix src\,$(PYINTERFACE_SRCS_IN))

# Local SuiteSparse wrapper
SSWRAP_DIR = sswrap
SS_VER=7.1.0_win
SSWRAP_OBJ = build\umf4_f77zwrapper64.obj
SSWRAP_SRC = $(SSWRAP_DIR)\umf4_f77zwrapper_SS_$(SS_VER).c

$(SSWRAP_OBJ): $(SSWRAP_SRC)
	$(C_COMP_EXE) $(CFLAGS) /I $(SSWRAP_DIR) /D ZLONG $(UMFPACK_INC) -c $< -o $@




#F77FLAGS= /nologo /fpp /Ot /Qm64 /warn:all /warn:noexternals /module:mods
#F95FLAGS= /nologo /fpp /Ot /Qm64 /warn:all /warn:noexternals /module:mods
#CFLAGS= /nologo /Ot /warn:all
F77FLAGS= /nologo /fpp /O2 /warn:all /warn:noexternals /module:mods
F95FLAGS= /nologo /fpp /O2 /warn:all /warn:noexternals /module:mods
CFLAGS= /nologo /O2 /warn:all

check1:
	echo $(PYINC)

check:
	# echo objs: $(OBJS)
	# echo f2pyobjs: $(F2PY_OBJS)
	# echo mods: $(SRCS_MODS)
	# echo mods: $(MODULES_MODS)
	echo $(PYINC)
	# echo $(MATH_INC)

mods: $(MODULES_MODS)

build\\%.mod : src\%.f90
	$(F_COMP_EXE) -c $(F95FLAGS) $(MATH_INC) $< -o $@

build\\%.obj : src\%.f90 $(MODULES_MODS)
	$(F_COMP_EXE) -c $(F95FLAGS) $(MATH_INC) $< -o $@

build\\%.obj : src\%.f $(MODULES_MODS)
	$(F_COMP_EXE) -c $(F77FLAGS) $(MATH_INC) $< -o $@


build\\%.obj : src\%.c
	$(C_COMP_EXE) -c $< -o $@ \
	$(CFLAGS) $(PYINC)

build\\%.obj : build\%.f
	$(F_COMP_EXE) -c $(F77FLAGS) $(MATH_INC) $< -o $@

# For building NumBATmodule.c
build\\%.obj : build\%.c
	$(C_COMP_EXE) -c $< -o $@ \
	$(CFLAGS) /D UPPERCASE_FORTRAN /D NO_APPEND_FORTRAN \
	$(PYINC)

build\\%.e : src\%.f
	cpp /I src $< -o $@

build\\%.e : src\\%.c
	$(C_COMP_EXE) -E $(CFLAGS) $(PYINC) $< -o $@

build\\%.e : build\\%.c
	$(C_COMP_EXE) -E $(CFLAGS) $(PYINC) $< -o $@

FORTMOD=build\fortranobject.c

build\fortranobject.c:
	copy $(NUMPY_VENV)\f2py\src\fortranobject.c build
	copy $(NUMPY_VENV)\f2py\src\fortranobject.h build


F2PY_SRCS = build\$(NumBAT_MOD)module.c build\$(NumBAT_MOD)-f2pywrappers.f build\fortranobject.f
F2PY_OBJSA = $(F2PY_SRCS:.c=.obj)
F2PY_OBJS = $(F2PY_OBJSA:.f=.obj)

$(NumBAT_MOD).pyf: $(SRCS)
	-$(RM) $(F2PY_SRCS)
	-$(MKDIR) build mods
	$(F2PY) -m $(NumBAT_MOD) -h $(NumBAT_MOD).pyf $(PYINTERFACE_SRCS) --overwrite-signature --lower
	$(F2PY) $(PYINTERFACE_SRCS) -m $(NumBAT_MOD) --build-dir build --lower -include\"../src/myhead.h\"

$(NumBAT_MOD).dll: $(NumBAT_MOD).pyf $(MODULES_MODS) $(OBJS) $(F2PY_OBJS) $(SSWRAP_OBJ) $(FORTMOD)
	$(C_COMP_EXE) /nologo /Wall  /LD -o $(NumBAT_MOD).dll  \
	$(OBJS) $(F2PY_OBJS) $(SSWRAP_OBJ) \
	/link /nodefaultlib:msvcrt.lib $(MATHLIB) \
	 $(GENLIB) \
	 $(SYSTEMPYLIB)



clean:
	- $(RM)  $(SS_WRAP)\*.obj
	- $(RM) mods
	- $(RM) .\*.lib .\*.exp
	- $(RM)  build\*.obj build\*.f build\*.c
	- $(RM) .\*.mod src\*.mod build\*.mod
	- $(RM)  $(NumBAT_MOD).pyf $(NumBAT_MOD).dll $(NumBAT_MOD).*.dll


