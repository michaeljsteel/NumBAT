%!PS-Adobe-3.0
%%Title: asmbly.f
%%For: Michael Steel
%%Creator: a2ps version 4.15.5
%%CreationDate: Mon Jun  3 18:21:47 2024
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 3
%%PageOrder: Ascend
%%DocumentMedia: a4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black Blue Green Red 
%%DocumentSuppliedResources: procset a2ps-color-prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988-2017 Free Software Foundation, Inc.
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  0 setgray
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.5 0.5 1 setrgbcolor
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    1 setgray
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def
%%BeginResource: procset a2ps-color-prolog 2.0 1

%% Definition of the color faces.
/p {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  0 0 0 FG
  false BG
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false BG
  false UL
  false BX
  0 0 0.9 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/K {
  false BG
  false UL
  false BX
  0 0 0.8 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/C {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/l {
  0 0 0 FG
  0.8 0.8 0 true BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/L {
  0 0 0 FG
  1 1 0 true BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/str {
  false BG
  false UL
  false BX
  0 0.5 0 FG
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  1 0 0 true BG
  false UL
  true BX
  1 1 1 FG
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul 2 div neg 0 rmoveto
    f# setfont
    0.8 0.1 0.1 FG
    c-show
  grestore
} bind def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 6 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() N
(      ) S
(subroutine) K
( ) p
(asmbly) L
(  \(i_cond, i_base, nel, npt, n_ddl, neq, nnodes, ) p n
(     *  shift, bloch_vec, nb_typ_el, pp, qq, table_nod, ) N
(     *  table_N_E_F, type_el, ineq, ip_period_N, ) N
(     *  ip_period_E_F, x, x_N_E_F, nonz, row_ind, col_ptr, ) N
(     *  mat1_re, mat1_im, mat2, i_work\)) N
() N
(c     NQUAD: The number of quadrature points used in each element.) c n
() p n
(      ) S
(implicit) K
( ) p
(none) K n
(      ) p
(integer) K
(*8 nel, npt, n_ddl, neq, nnodes) p n
(      ) S
(integer) K
(*8 i_cond, i_base, i_base2, nb_typ_el, nonz) p n
(      ) S
(integer) K
(*8 ip_period_N\(npt\), ip_period_E_F\(n_ddl\)) p n
(      ) S
(integer) K
(*8 row_ind\(nonz\), col_ptr\(neq+1\)) p n
(      ) S
(integer) K
(*8 type_el\(nel\)) p n
(      ) S
(integer) K
(*8 table_nod\(nnodes,nel\), ineq\(3,n_ddl\)) p n
(      ) S
(integer) K
(*8 table_N_E_F\(14,nel\)) p n
(      ) S
(integer) K
(*8 i_work\(3*n_ddl\)) p n
(      ) S
(double precision) K
( x\(2,npt\), x_N_E_F\(2,n_ddl\)) p n
(      ) S
(complex) K
(*16 pp\(nb_typ_el\), qq\(nb_typ_el\), shift) p n
(      ) S
(complex) K
(*16 mat2\(nonz\)) p n
(      ) S
(double precision) K
( mat1_re\(nonz\), mat1_im\(nonz\)) p n
() N
(      ) S
(integer) K
(*8 nquad, nquad_max) p n
(      ) S
(parameter) K
( \(nquad_max = 25\)) p n
(      ) S
(double precision) K
( wq\(nquad_max\)) p n
(      ) S
(double precision) K
( xq\(nquad_max\), yq\(nquad_max\)) p n
(      ) S
(double precision) K
( xx\(2\), xx_g\(2\), ww, det) p n
(      ) S
(double precision) K
( mat_B\(2,2\), mat_T\(2,2\)) p n
(      ) S
(double precision) K
( grad_i\(2\), grad_j\(2\)) p n
(      ) S
(double precision) K
( phi_z_i, phi_z_j) p n
() N
(      ) S
(integer) K
(*8 nnodes_0, nddl_0, nddl_t, ui) p n
(      ) S
(parameter) K
( \(nnodes_0 = 6\)) p n
(      ) S
(parameter) K
( \(nddl_0 = 14\)) p n
(      ) S
(parameter) K
( \(nddl_t=4\)) p n
() N
(      ) S
(integer) K
(*8 nod_el_p\(nnodes_0\), basis_list\(4,3,nddl_t\)) p n
(      ) S
(double precision) K
( xel\(2,nnodes_0\)) p n
() N
(      ) S
(double precision) K
( phi1_list\(3\), grad1_mat0\(2,3\), grad1_mat\(2,3\)) p n
() N
(      ) S
(double precision) K
( phi2_list\(6\), grad2_mat0\(2,6\)) p n
(      ) S
(double precision) K
( grad2_mat\(2,6\)) p n
() N
(      ) S
(double precision) K
( phi3_list\(10\), grad3_mat0\(2,10\)) p n
(      ) S
(double precision) K
( grad3_mat\(2,10\)) p n
() N
(      ) S
(double precision) K
( vec_phi_j\(2\), curl_phi_j) p n
(      ) S
(double precision) K
( vec_phi_i\(2\), curl_phi_i) p n
(      ) S
(complex) K
(*16 val_exp\(nddl_0\), z_phase_fact) p n
() N
(      ) S
(integer) K
(*8 i, j, k, j1, iel, iq, typ_e) p n
(      ) S
(integer) K
(*8 jtest, jp, ind_jp, j_eq) p n
(      ) S
(integer) K
(*8 itrial, ip, ind_ip, i_eq) p n
(      ) S
(integer) K
(*8 info_curved, n_curved, debug, col_start, col_end) p n
(      ) S
(complex) K
(*16 z_tmp1, z_tmp2) p n
(      ) S
(double precision) K
( ZERO, ONE) p n
(      ) S
(parameter) K
( \(ZERO = 0.0D0\)) p n
(      ) S
(parameter) K
( \(ONE = 1.0D0\)) p n
(      ) S
(double precision) K
( bloch_vec\(2\), r_tmp1, r_tmp2) p n
(asmbly.f) (Page 1/6) (Jan 30, 2024 14:45) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(double precision) K
( delta_xx\(2\)) p n
(      ) S
(double precision) K
( ddot) p n
(      ) S
(complex) K
(*16 M_tt, M_zz, M_tz, M_zt) p n
(      ) S
(complex) K
(*16 K_tt, K_zz, K_tz, K_zt) p n
(      ) S
(complex) K
(*16 ii) p n
(c) c n
(ccccccccccccccccccccccccccccccccccccccc) N
(c) N
(      ui = 6) p n
(      debug = 0) N
(c) c n
(c     The CSC indexing, i.e., col_ptr, is 1-based ) N
(c      But valpr.f may have changed the CSC indexing to 0-based indexing\)) N
(      ) p
(if) K
( \(i_base ) p
(.eq.) K
( 0\) ) p
(then) K n
(        i_base2 = 1) p n
(      ) S
(else) K n
(        i_base2 = 0) p n
(      ) S
(endif) K n
(c) c n
(      ) p
(if) K
( \( nnodes ) p
(.ne.) K
( 6 \) ) p
(then) K n
(        ) p
(write) K
(\(ui,*\) ") p
(asmbly: problem nnodes = ) str
(", nnodes) p n
(        ) S
(write) K
(\(ui,*\) ") p
(asmbly: nnodes should be equal to 14 !) str
(") p n
(        ) S
(write) K
(\(ui,*\) ") p
(asmbly: Aborting...) str
(") p n
(        ) S
(stop) K n
(      ) p
(endif) K n
(c) c n
(      ) p
(call) K
( ) p
(quad_triangle) l
( \(nquad, nquad_max, wq, xq, yq\)) p n
(c) c n
(      ) p
(if) K
( \(debug ) p
(.eq.) K
( 1\) ) p
(then) K n
(        ) p
(write) K
(\(ui,*\) ") p
(asmbly: bloch_vec = ) str
(", bloch_vec) p n
(        ) S
(write) K
(\(ui,*\) ") p
(asmbly: nquad, nquad_max = ) str
(", ) p n
(     *              nquad, nquad_max) N
(        ) S
(write) K
(\(ui,*\) ") p
(asmbly: i_cond = ) str
(", i_cond) p n
(      ) S
(endif) K n
(c) c n
(ccccccccccccccccccccccccccccccccccccccc) N
(c) N
(c  ii = sqrt\(-1\)) N
(      ii = dcmplx\(0.0d0, 1.0d0\)) p n
() N
(      ) S
(do) K
( i=1,nonz) p n
(        mat1_re\(i\) = 0.d0) N
(        mat1_im\(i\) = 0.d0) N
(        mat2\(i\) = 0.d0) N
(      ) S
(enddo) K n
(c) c n
(      n_curved = 0) p n
(      ) S
(do) K
( iel=1,nel) p n
(        typ_e = type_el\(iel\)) N
(        ) S
(do) K
( j=1,nnodes) p n
(          j1 = table_nod\(j,iel\)) N
(          nod_el_p\(j\) = j1) N
(          xel\(1,j\) = x\(1,j1\)) N
(          xel\(2,j\) = x\(2,j1\)) N
(          val_exp\(j\) = 1.0d0) N
(        ) S
(enddo) K n
(        ) p
(call) K
( ) p
(curved_elem_tri) l
( \(nnodes, xel, info_curved, r_tmp1\)) p n
(        ) S
(if) K
( \(info_curved ) p
(.eq.) K
( 1\) ) p
(then) K n
(          n_curved = n_curved + 1) p n
(        ) S
(endif) K n
() p n
(        ) S
(if) K
( \(i_cond ) p
(.eq.) K
( 2\) ) p
(then) K n
(asmbly.f) (Page 2/6) (Jan 30, 2024 14:45) title
border
grestore
(Printed by Michael Steel) rhead
(../asmbly.f) (1/3) (Monday June 03, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(c         Periodic boundary condition) c n
(          ) p
(do) K
( j=1,nnodes) p n
(            j1 = ip_period_N\(nod_el_p\(j\)\)) N
(            ) S
(if) K
( \(j1 ) p
(.ne.) K
( 0\) nod_el_p\(j\) = j1) p n
(          ) S
(enddo) K n
(        ) p
(endif) K n
(        ) p
(call) K
( ) p
(basis_ls) l
(\(nod_el_p, basis_list\)) p n
(        ) S
(do) K
( j=1,nddl_0) p n
(          val_exp\(j\) = 1.0d0) N
(        ) S
(enddo) K n
(        ) p
(if) K
( \(i_cond ) p
(.eq.) K
( 2\) ) p
(then) K n
(c         val_exp: Bloch mod ephase factor between the origin point and destinat) c n
(ion point) N
(c         For a pair of periodic points, one is chosen as origin and the other i) N
(s the destination) N
(          ) p
(do) K
( j=1,nddl_0) p n
(            ip = table_N_E_F\(j,iel\)) N
(            j1 = ip_period_E_F\(ip\)) N
(            ) S
(if) K
( \(j1 ) p
(.ne.) K
( 0\) ) p
(then) K n
(              ) p
(do) K
( k=1,2) p n
(                delta_xx\(k\) = x_N_E_F\(k,ip\) - x_N_E_F\(k,j1\)) N
(              ) S
(enddo) K n
(              r_tmp1 = ddot\(2, bloch_vec, 1, delta_xx, 1\)) p n
(              val_exp\(j\) = ) S
(exp) K
(\(ii*r_tmp1\)) p n
(            ) S
(endif) K n
(          ) p
(enddo) K n
(        ) p
(endif) K n
(c) c n
(        ) p
(do) K
( iq=1,nquad) p n
(          xx\(1\) = xq\(iq\)) N
(          xx\(2\) = yq\(iq\)) N
(          ww = wq\(iq\)) N
(c         xx   = coordinate on the reference triangle) c n
(c         xx_g = coordinate on the actual triangle) N
(c) N
(c         We will also need the gradients of the P1 element) N
(           ) p
(call) K
( ) p
(phi1_2d_mat) l
(\(xx, phi1_list, grad1_mat0\)) p n
(c          grad2_mat0 = gradient on the reference triangle \(P2 element\)) c n
(           ) p
(call) K
( ) p
(phi2_2d_mat) l
(\(xx, phi2_list, grad2_mat0\)) p n
(c          grad3_mat0 = gradient on the reference triangle \(P3 element\)) c n
(           ) p
(call) K
( ) p
(phi3_2d_mat) l
(\(xx, phi3_list, grad3_mat0\)) p n
(c) c n
(          ) p
(if) K
( \(info_curved ) p
(.eq.) K
( 0\) ) p
(then) K n
(c           Rectilinear element) c n
(            ) p
(call) K
( ) p
(jacobian_p1_2d) l
(\(xx, xel, nnodes, ) p n
(     *               xx_g, det, mat_B, mat_T\)) N
(            ) S
(if) K
( \(det ) p
(.le.) K
( 0 ) p
(.and.) K
( debug ) p
(.eq.) K
( 1 ) p
(.and.) K
( iq ) p
(.eq.) K
( 1\) ) p
(then) K n
(              ) p
(write) K
(\(ui,*\) ") p
(   !!!) str
(") p n
(              ) S
(write) K
(\(ui,*\) ") p
(asmbly: det <= 0: iel, det ) str
(", iel, det) p n
(              ) S
(write) K
(\(ui,*\) ") p
(x : ) str
(", \(nod_el_p\(j\),j=1,nnodes\)) p n
(              ) S
(write) K
(\(ui,*\) ") p
(x : ) str
(", \(xel\(1,j\),j=1,3\)) p n
(              ) S
(write) K
(\(ui,*\) ") p
(y : ) str
(", \(xel\(2,j\),j=1,3\)) p n
(              ) S
(write) K
(\(ui,*\)) p n
(            ) S
(endif) K n
(          ) p
(elseif) K
( \(info_curved ) p
(.eq.) K
( 1\) ) p
(then) K n
(c           Isoparametric element) c n
(            ) p
(call) K
( ) p
(jacobian_p2_2d) l
(\(xx, xel, nnodes, phi2_list, ) p n
(     *               grad2_mat0, xx_g, det, mat_B, mat_T\)) N
(          ) S
(else) K n
(            ) p
(write) K
(\(ui,*\) ") p
(asmbly: info_curved has an invalid value : ) str
(", ) p n
(     *               info_curved) N
(            ) S
(write) K
(\(ui,*\) ") p
(asmbly: Aborting...) str
(") p n
(asmbly.f) (Page 3/6) (Jan 30, 2024 14:45) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            ) p
(stop) K n
(          ) p
(endif) K n
(c            write\(ui,*\) "asmbly: info_curved = ", info_curved) c n
(C            if\(abs\(det\) .lt. 1.0d-10\) then) N
(           ) p
(if) K
(\() p
(abs) K
(\(det\) ) p
(.lt.) K
( 1.0d-20\) ) p
(then) K n
(             ) p
(write) K
(\(ui,*\)) p n
(             ) S
(write) K
(\(ui,*\) ") p
(   ???) str
(") p n
(             ) S
(write) K
(\(ui,*\) ") p
(asmbly: det = 0 : iel, det = ) str
(", iel, det) p n
(             ) S
(write) K
(\(ui,*\) ") p
(asmbly: Aborting...) str
(") p n
(             ) S
(stop) K n
(           ) p
(endif) K n
(c) c n
(c          grad_i  = gradient on the actual triangle) N
(c          grad_i  = Transpose\(mat_T\)*grad_i0) N
(c          Calculation of the matrix-matrix product:) N
(c) N
(          ) p
(call) K
( ) p
(DGEMM) l
(\(') p
(Transpose) str
(',') p
(N) str
(', 2, 3, 2, ONE, mat_T, 2,) p n
(     *      grad1_mat0, 2, ZERO, grad1_mat, 2\)) N
() N
(          ) S
(call) K
( ) p
(DGEMM) l
(\(') p
(Transpose) str
(',') p
(N) str
(', 2, 6, 2, ONE, mat_T, 2,) p n
(     *      grad2_mat0, 2, ZERO, grad2_mat, 2\)) N
() N
(          ) S
(call) K
( ) p
(DGEMM) l
(\(') p
(Transpose) str
(',') p
(N) str
(', 2, 10, 2, ONE, mat_T, 2,) p n
(     *      grad3_mat0, 2, ZERO, grad3_mat, 2\)) N
() N
(          ) S
(do) K
( jtest=1,nddl_0) p n
(            jp = table_N_E_F\(jtest,iel\)) N
(            ) S
(do) K
( j_eq=1,3) p n
(c              jp = table_N_E_F\(jtest,iel\)) c n
(              ind_jp = ineq\(j_eq,jp\)) p n
(              ) S
(if) K
( \(ind_jp ) p
(.gt.) K
( 0\) ) p
(then) K n
(                col_start = col_ptr\(ind_jp\) + i_base2) p n
(                col_end = col_ptr\(ind_jp+1\) - 1 + i_base2) N
(c               unpack row into i_work) c n
(                ) p
(do) K
( i=col_start,col_end) p n
(                  i_work\(row_ind\(i\) + i_base2\) = i) N
(                ) S
(enddo) K n
(C                 ! edge or face element) c n
(                ) p
(if) K
( \(jtest ) p
(.le.) K
( nddl_t\) ) p
(then) K
( ) p n
(c                 Determine the basis vector) c n
(                  ) p
(call) K
( ) p
(basis_vec) l
( \(j_eq, jtest, basis_list, phi2_list,) p n
(     *             grad1_mat, grad2_mat, vec_phi_j, curl_phi_j\)) N
(                  grad_j\(1\) = 0.0d0) N
(                  grad_j\(2\) = 0.0d0) N
(                  phi_z_j = 0.0d0) N
(                ) S
(else) K n
(                  vec_phi_j\(1\) = 0.0d0) p n
(                  vec_phi_j\(2\) = 0.0d0) N
(                  curl_phi_j = 0.0d0) N
(                  grad_j\(1\) = grad3_mat\(1,jtest-nddl_t\)) N
(                  grad_j\(2\) = grad3_mat\(2,jtest-nddl_t\)) N
(                  phi_z_j = phi3_list\(jtest-nddl_t\)) N
(                ) S
(endif) K n
(                ) p
(do) K
( itrial=1,nddl_0) p n
(                  z_phase_fact = val_exp\(jtest\) * ) S
(conjg) K
(\(val_exp\(itrial\)\)) p n
(                  ) S
(do) K
( i_eq=1,3) p n
(                    ip = table_N_E_F\(itrial,iel\)) N
(                    ind_ip = ineq\(i_eq,ip\)) N
(                    ) S
(if) K
( \(ind_ip ) p
(.gt.) K
( 0\) ) p
(then) K n
(                      ) p
(if) K
( \(ind_jp ) p
(.eq.) K
( ind_ip ) p
(.and.) K
( ) p n
(     *                ) S
(abs) K
(\(imag\(z_phase_fact\)\) ) p
(.gt.) K
( 1.0d-15\) ) p
(then) K n
(                        ) p
(write) K
(\(ui,*\) ") p
(phase_fact: ) str
(", ind_jp, ind_ip, ) p n
(asmbly.f) (Page 4/6) (Jan 30, 2024 14:45) title
border
grestore
(Printed by Michael Steel) rhead
(../asmbly.f) (2/3) (Monday June 03, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(     *                z_phase_fact, val_exp\(jtest\), val_exp\(itrial\)) p n
(                      ) S
(endif) K n
(C                       ! edge or face element) c n
(                      ) p
(if) K
( \(itrial ) p
(.le.) K
( nddl_t\) ) p
(then) K
( ) p n
(                        ) S
(call) K
( ) p
(basis_vec) l
( \(i_eq, itrial, basis_list, ) p n
(     *                  phi2_list, grad1_mat, grad2_mat, vec_phi_i, ) N
(     *                  curl_phi_i\)) N
(                          grad_i\(1\) = 0.0d0) N
(                          grad_i\(2\) = 0.0d0) N
(                          phi_z_i = 0.0d0) N
(                        ) S
(else) K n
(                          vec_phi_i\(1\) = 0.0d0) p n
(                          vec_phi_i\(2\) = 0.0d0) N
(                          curl_phi_i = 0.0d0) N
(                          grad_i\(1\) = grad3_mat\(1,itrial-nddl_t\)) N
(                          grad_i\(2\) = grad3_mat\(2,itrial-nddl_t\)) N
(                          phi_z_i = phi3_list\(itrial-nddl_t\)) N
(                      ) S
(endif) K n
(cccccccccccccccccccccc) c n
(c                     Reference; see Eq. \(40\) of the FEM paper:) N
(c                     K. Dossou and M. Fontaine) N
(c                     "A high order isoparametric finite element method for the ) N
(computation of waveguide modes") N
(c                     Computer Methods in Applied Mechanics and Engineering, vol) N
(. 194, no. 6-8, pp. 837-858, 2005.) N
(cccccccccccccccccccccc) N
(                      ) p
(if) K
( \(itrial ) p
(.le.) K
( nddl_t ) p
(.and.) K
( ) p n
(     *                    jtest ) S
(.le.) K
( nddl_t\) ) p
(then) K n
(                        r_tmp1 = curl_phi_j * curl_phi_i) p n
(                        r_tmp2 = ddot\(2, vec_phi_j, 1, vec_phi_i, 1\)) N
(                        K_tt = r_tmp1 * pp\(typ_e\) - r_tmp2 * qq\(typ_e\)) N
(                        M_tt = - r_tmp2 * pp\(typ_e\)) N
(                        z_tmp1 = K_tt * ww * ) S
(abs) K
(\(det\) * z_phase_fact) p n
(                        z_tmp2 = M_tt * ww * ) S
(abs) K
(\(det\) * z_phase_fact) p n
(                      ) S
(elseif) K
( \(itrial ) p
(.le.) K
( nddl_t ) p
(.and.) K
( ) p n
(     *                    jtest ) S
(.gt.) K
( nddl_t\) ) p
(then) K n
(                        r_tmp1 = ddot\(2, grad_j, 1, vec_phi_i, 1\)) p n
(                        K_tz = 0.0d0) N
(                        M_tz = r_tmp1 * pp\(typ_e\)) N
(                        z_tmp1 = K_tz * ww * ) S
(abs) K
(\(det\) * z_phase_fact) p n
(                        z_tmp2 = M_tz * ww * ) S
(abs) K
(\(det\) * z_phase_fact) p n
(                      ) S
(elseif) K
( \(itrial ) p
(.gt.) K
( nddl_t ) p
(.and.) K
( ) p n
(     *                    jtest ) S
(.le.) K
( nddl_t\) ) p
(then) K n
(                        r_tmp1 = ddot\(2, vec_phi_j, 1, grad_i, 1\)) p n
(                        K_zt = r_tmp1 * pp\(typ_e\)) N
(                        M_zt = 0.0d0) N
(                        z_tmp1 = K_zt * ww * ) S
(abs) K
(\(det\) * z_phase_fact) p n
(                        z_tmp2 = M_zt * ww * ) S
(abs) K
(\(det\) * z_phase_fact) p n
(                      ) S
(elseif) K
( \(itrial ) p
(.gt.) K
( nddl_t ) p
(.and.) K
( ) p n
(     *                    jtest ) S
(.gt.) K
( nddl_t\) ) p
(then) K n
(                        r_tmp1 = ddot\(2, grad_j, 1, grad_i, 1\)) p n
(                        r_tmp2 = phi_z_j * phi_z_i) N
(                        K_zz = - r_tmp1 * pp\(typ_e\) + r_tmp2 * qq\(typ_e\)) N
(                        M_zz = 0.0d0) N
(                        z_tmp1 = K_zz * ww * ) S
(abs) K
(\(det\) * z_phase_fact) p n
(                        z_tmp2 = M_zz * ww * ) S
(abs) K
(\(det\) * z_phase_fact) p n
(                      ) S
(else) K n
(                        ) p
(write) K
(\(ui,*\) ") p
(itrial or jtest has an ) str
(",) p n
(     *                    ") S
(invalid value) str
(") p n
(                        ) S
(write) K
(\(ui,*\) ") p
(itrial jtest, = ) str
(", itrial, jtest) p n
(                        ) S
(write) K
(\(ui,*\) ") p
(asmbly: Aborting...) str
(") p n
(                        ) S
(stop) K n
(asmbly.f) (Page 5/6) (Jan 30, 2024 14:45) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                      ) p
(endif) K n
(                      z_tmp1 = z_tmp1 - shift*z_tmp2) p n
() N
(                      k = i_work\(ind_ip\)) N
(                      ) S
(if) K
( \(k ) p
(.gt.) K
( 0 ) p
(.and.) K
( k ) p
(.le.) K
( nonz\) ) p
(then) K n
(                        mat1_re\(k\) = mat1_re\(k\) + ) p
(dble) K
(\(z_tmp1\)) p n
(                        mat1_im\(k\) = mat1_im\(k\) + imag\(z_tmp1\)) N
(                        mat2\(k\) = mat2\(k\) + z_tmp2) N
(                      ) S
(else) K n
(                        ) p
(write) K
(\(ui,*\) ") p
(asmbly: problem with row_ind !!) str
(") p n
(                        ) S
(write) K
(\(ui,*\) ") p
(asmbly: k, nonz = ) str
(", k, nonz) p n
(                        ) S
(write) K
(\(ui,*\) ") p
(asmbly: Aborting...) str
(") p n
(                        ) S
(stop) K n
(                      ) p
(endif) K n
(                    ) p
(endif) K n
(                  ) p
(enddo) K n
(                ) p
(enddo) K n
(              ) p
(endif) K n
(            ) p
(enddo) K n
(          ) p
(enddo) K n
(        ) p
(enddo) K n
(      ) p
(enddo) K n
(c) c n
(      ) p
(if) K
( \(debug ) p
(.eq.) K
( 1\) ) p
(then) K n
(        ) p
(write) K
(\(ui,*\) ") p
(asmbly: shift = ) str
(", shift) p n
(        ) S
(write) K
(\(ui,*\) ") p
(asmbly: number of curved elements = ) str
(", n_curved) p n
(        ) S
(write) K
(\(ui,*\) ") p
(asmbly: nel, \(nel-n_curved\) = ) str
(", nel, ) p n
(     *                  \(nel-n_curved\)) N
(      ) S
(endif) K n
(c) c n
(      ) p
(if) K
( \(debug ) p
(.eq.) K
( 1\) ) p
(then) K n
(        ) p
(write) K
(\(ui,*\)) p n
(        ) S
(write) K
(\(ui,*\) ") p
(  Re pp = ) str
(", ) p
(dble) K
(\(pp\)) p n
(        ) S
(write) K
(\(ui,*\) ") p
(imag pp = ) str
(", imag\(pp\)) p n
(        ) S
(write) K
(\(ui,*\)) p n
(        ) S
(write) K
(\(ui,*\) ") p
(  Re qq = ) str
(", ) p
(dble) K
(\(qq\)) p n
(        ) S
(write) K
(\(ui,*\) ") p
(imag qq = ) str
(", imag\(qq\)) p n
(      ) S
(endif) K n
(c) c n
(      ) p
(return) K n
(      ) p
(end) K n
(asmbly.f) (Page 6/6) (Jan 30, 2024 14:45) title
border
grestore
(Printed by Michael Steel) rhead
(../asmbly.f) (3/3) (Monday June 03, 2024) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
