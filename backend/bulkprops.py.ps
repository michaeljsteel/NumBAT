%!PS-Adobe-3.0
%%Title: bulkprops.py
%%For: Michael Steel
%%Creator: a2ps version 4.15.5
%%CreationDate: Wed May 22 18:03:48 2024
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 2
%%PageOrder: Ascend
%%DocumentMedia: a4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black Blue Green Red 
%%DocumentSuppliedResources: procset a2ps-color-prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988-2017 Free Software Foundation, Inc.
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  0 setgray
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.5 0.5 1 setrgbcolor
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    1 setgray
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def
%%BeginResource: procset a2ps-color-prolog 2.0 1

%% Definition of the color faces.
/p {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  0 0 0 FG
  false BG
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false BG
  false UL
  false BX
  0 0 0.9 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/K {
  false BG
  false UL
  false BX
  0 0 0.8 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/C {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/l {
  0 0 0 FG
  0.8 0.8 0 true BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/L {
  0 0 0 FG
  1 1 0 true BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/str {
  false BG
  false UL
  false BX
  0 0.5 0 FG
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  1 0 0 true BG
  false UL
  true BX
  1 1 1 FG
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul 2 div neg 0 rmoveto
    f# setfont
    0.8 0.1 0.1 FG
    c-show
  grestore
} bind def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 6 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(import) K
( numpy as np) p n
(import) K
( scipy.linalg) p n
(import) K
( sys) p n
() N
(from) K
( nbtypes ) p
(import) K
( unit_x, unit_y, unit_z) p n
() N
(def) K
( kvec_to_symmetric_gradient\(kvec\):) p n
(    ''') S
(Calculates 6x3 symmetric gradient matrix for plane wave of wavevector kvec.) str n
() N
(    See Auld I, eq 1.53) N
(    ) S
(''') p n
(    kx, ky, kz = kvec) N
(    ) N
(    nabla_I_J = np.array\([) N
(        [kx,   0.0, 0.0],) N
(        [0.0,  ky,  0.0],) N
(        [0.0,  0.0, kz],) N
(        [0,    kz,  ky],) N
(        [kz,   0.0, kx],) N
(        [ky,   kx, 0.0]) N
(    ]\)) N
(    ) S
(return) K
( nabla_I_J) p n
(    ) N
(    ) N
(def) K
( power_flux_christoffel\(kapv, v_p, evec, c_stiff\):) p n
(    ''') S
(Evaluates the power flux P=-v^* \\cdot T for a given unit wavevector kapv, eigenvector evec and implicit wa) str n
(venumber k and frequency omega. ) N
() N
(    Factors of 2 seem to be correct here, but good to write out in full in docs.) N
(    ) S
(''') p n
() N
(    ) S
(# S_I = \\nabla_Ij \(uj e^i\(k kap . r\)\) = i k \(\\nabla_Ij  e^i\(k kap . r\)\) . uj) c n
(    ) p
(# Evaluate the S_I 6x1 vector, Auld 1.50, 1.49                        ) c n
(    S_I = 1j * np.matmul\(kvec_to_symmetric_gradient\(kapv\), evec\)) p n
() N
(    T_I = np.matmul\(c_stiff.as_zerobase_matrix\(\), S_I\)  ) S
(# Auld 3.20   # Indices ) c n
(off by 1 from zero count) N
() p n
(    ) S
(# Pcomp = - 1/2 v^* . T ,   Auld 2.30       , 5.77) c n
(    ) p
(#       =  -1/2 \(i \\omega u^*\) .  T) c n
(    ) p
(#om = 1.0 # unit k and omega) c n
(    vsx, vsy, vsz = 1j*np.conj\(evec\)) p n
(    Pcomp = - 0.5 * np.array\([) N
(        vsx*T_I[0] + vsy*T_I[5] + vsz*T_I[4], ) N
(        vsx*T_I[5] + vsy*T_I[1] + vsz*T_I[3], ) N
(        vsx*T_I[4] + vsy*T_I[3] + vsz*T_I[2] ]\)) N
() N
(    ) S
(# u_s = 1/2  k^2 S_I c_IJ SJ  # Auld, 5.35) c n
(    u_s = .5*np.matmul\(np.matmul\(S_I, c_stiff.as_zerobase_matrix\(\)\), S_I\)  ) p
(# rea) c n
(l vs complex fields?) N
() p n
(    ) S
(# vg = Pcomp/u_s ->  Pcomp/us   \(omega k\)/\(k^2\) = v_p Pcomp/us) c n
(    v_g = - np.real\(v_p * Pcomp/u_s\)) p n
(    ) S
(#print\('powers', kapv, v_p, u_s, Pcomp, v_g\)) c n
(    ) p
(return) K
( v_g) p n
(        ) N
(    ) N
(    ) N
(def) K
( Gamma_christoffel\(vkap, c_stiff, rho\):) p n
(    ''') S
(Returns Gamma_ij = 1/V0^2   mD.Cij.md^T/rho  in units of \(km/s\)^2) str n
(    vkap is unit wavevector.) N
(    V0=1km/s) N
(bulkprops.py) (Page 1/4) (May 22, 2024 18:01) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() str n
(    See Auld V1. Sec 7.D) N
(    ) S
(''') p n
(    \(kapx, kapy, kapz\) = vkap) N
(    v0sq = 1e6) N
(    ) N
(    mD = np.array\([) N
(        [kapx, 0,    0,    0,    kapz, kapy],) N
(        [0,    kapy, 0,    kapz, 0,    kapx],) N
(        [0,    0,    kapz, kapy, kapx, 0]]\)) N
() N
(    m_Gamma = np.matmul\(np.matmul\(mD, c_stiff.as_zerobase_matrix\(\)\), mD.T\)/\(v0sq) N
(*rho\)) N
() N
(    ) S
(return) K
( m_Gamma) p n
() N
(def) K
( chareq_christoffel\(vkap, c_stiff, rho, v_p\):) p n
(    ''') S
(Returns Om=|Gamma_ij -\\omega^2 I|, the characteristic function of the Christoffel equation.) str n
() N
(    v_p is in km/s) N
(    See Auld V1. Sec 7.D) N
(    ) S
(''') p n
(    ) S
(return) K
( scipy.linalg.det\(Gamma_christoffel\(vkap, c_stiff, rho\)-v_p**2*np.eye\() p n
(3\)\)) N
( ) N
(def) K
( solve_christoffel\(vkap, c_stiff, rho\):) p n
(    ''') S
(Solve eigenproblem of Christoffel equation in the direction vkap \(a 2D unit vector\). Returns for each of 3 mo) str n
(des: ) N
(        phase velocity                v_phase[m]) N
(        polarisation eigenvetors      evecs[:,m]) N
(        group velocity vectors.       v_group[m:x/y/z]) N
() N
(    Modes are sorted by decreasing phase velocity.) N
() N
(    See Auld V1. Sec 7.D) N
(    ) S
(''') p n
() N
(    m_Gamma = Gamma_christoffel\(vkap, c_stiff, rho\)) N
( ) N
(    ) S
(# Solve and normalise) c n
(    evals, evecs = scipy.linalg.eig\(m_Gamma\)) p n
(    ) S
(for) K
( i ) p
(in) K
( range\(3\):) p n
(        evecs[:, i] /= np.linalg.norm\(evecs[:, i]\)  ) N
(        ) S
(# TODO: make a oneliner:") c n
(        ) p
(# evecs *= 1/np.sqrt\(np.diag\(np.real\(evecs.T @ evecs\)\)\)) c n
(        ) p n
(    vels = np.sqrt\(np.real\(evals\)\)  ) S
(# result is in km/s) c n
() p n
(    ) S
(# orthos = np.array\([) c n
(    ) p
(#     np.dot\(evecs[:,0], evecs[:,1]\),) c n
(    ) p
(#     np.dot\(evecs[:,0], evecs[:,2]\),) c n
(    ) p
(#     np.dot\(evecs[:,1], evecs[:,2]\) ]\)) c n
(    ) p
(# print\(np.abs\(orthos\).max\(\)\)) c n
() p n
(    ) S
(# Sort according to velocity) c n
() p n
(    ivs = np.argsort\(-vels\)  ) S
(# most likely get pwave first) c n
() p n
(    v_vphase = np.sqrt\(np.real\(evals[ivs]\)\).copy\(\)) N
(    v_evecs = evecs[:, ivs].copy\(\)) N
() N
(    ) S
(# now look for vg here) c n
(bulkprops.py) (Page 2/4) (May 22, 2024 18:01) title
border
grestore
(Printed by Michael Steel) rhead
(bulkprops.py) (1/2) (Wednesday May 22, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    ) p
(# vg = - nabla_k Om/ dOm/dom = nabla_kappa Om/ dOm/dvp =) c n
() p n
(    v_vgroup = np.zeros\([3,3]\)  ) S
(# first index is mode, second is component of \\v) c n
(ec{v}_g) N
(    ) p n
(    ) N
(    dkap = 0.005  ) S
(# about 0.5 %) c n
(    dvel = 0.005   ) p
(# about 0.5 %) c n
() p n
(    ) S
(# with open\('tt.dat', 'w'\) as fout:) c n
(        ) p n
(    ) S
(#     for jj in range\(1000\):) c n
(    ) p
(#         v_p = 7*jj/1000.) c n
(    ) p
(#         dOmdkapx = \(chareq_christoffel\(vkap+dkap*unit_x, c_stiff, rho, v_p) c n
(\)-) N
(    ) p
(#              chareq_christoffel\(vkap-dkap*unit_x, c_stiff, rho, v_p\)\)/\(2*d) c n
(kap\)) N
(    ) p
(#         dOmdvp = \(chareq_christoffel\(vkap, c_stiff, rho, v_p+dvel\)- ) c n
(    ) p
(#           chareq_christoffel\(vkap, c_stiff, rho, v_p-dvel\)\)/\(2*dvel\)) c n
(    ) p
(#         rat = -dOmdkapx/\(dOmdvp+1e-14\)) c n
(    ) p n
(    ) S
(#         fout.write\(f'{jj}  {v_p}  {dOmdkapx} {dOmdvp} {rat}  \\n'\)) c n
() p n
(    ) S
(# sys.exit\(0\)) c n
(    ) p
(for) K
( m ) p
(in) K
( range\(3\): ) p
(# for each mode at this vkap) c n
(        v_p = v_vphase[m]) p n
(        v_g = power_flux_christoffel\(vkap, v_p, v_evecs[:,m], c_stiff\)) N
(        v_vgroup[m,:] = v_g ) N
(            ) N
(        ) S
(# for ii in range\(10\):) c n
(        ) p
(#     dkk = dkap /2**ii) c n
(        ) p
(#     print\('dk005', ii, \(chareq_christoffel\(vkap+dkk*unit_x, c_stiff, r) c n
(ho, v_p\)-) N
(        ) p
(#          chareq_christoffel\(vkap-dkk*unit_x, c_stiff, rho, v_p\)\)/\(2*dk) c n
(k\)\)) N
(            ) p n
() N
(        ) S
(# dOmdkapx = \(chareq_christoffel\(vkap+dkap*unit_x, c_stiff, rho, v_p\)-) c n
(        ) p
(#          chareq_christoffel\(vkap-dkap*unit_x, c_stiff, rho, v_p\)\)/\(2*d) c n
(kap\)) N
(    ) p n
(        ) S
(# dOmdkapy = \(chareq_christoffel\(vkap+dkap*unit_y, c_stiff, rho, v_p\)- ) c n
(        ) p
(#           chareq_christoffel\(vkap-dkap*unit_y, c_stiff, rho, v_p\)\)/\(2*) c n
(dkap\)) N
() p n
(        ) S
(# dOmdkapz = \(chareq_christoffel\(vkap+dkap*unit_z, c_stiff, rho, v_p\)- ) c n
(        ) p
(#          chareq_christoffel\(vkap-dkap*unit_z, c_stiff, rho, v_p\)\)/\(2*d) c n
(kap\)) N
() p n
(        ) S
(# dOmdvp = \(chareq_christoffel\(vkap, c_stiff, rho, v_p+dvel\)- ) c n
(        ) p
(#       chareq_christoffel\(vkap, c_stiff, rho, v_p-dvel\)\)/\(2*dvel\)) c n
() p n
(        ) S
(# vg = -np.array\([dOmdkapx, dOmdkapy, dOmdkapz]\)/dOmdvp) c n
(        ) p
(# v_vgroup[m,:] = vg) c n
() p n
() N
(        ) S
(# print\('\\n\\n',vkap, vkap+dkap*unit_x, v_p, v_g, '\\n        ',) c n
(        ) p
(#       #dOmdkapx, dOmdkapy, dOmdkapz, dOmdvp, '\\n        ',) c n
(        ) p
(#       Gamma_christoffel\(vkap, c_stiff, rho\),) c n
(        ) p
(#       chareq_christoffel\(vkap, c_stiff, rho, v_p\),) c n
(        ) p
(#       np.matmul\(Gamma_christoffel\(vkap, c_stiff, rho\), v_evecs[:,m]\)) c n
(        ) p
(#                 -v_p**2*v_evecs[:,m],  v_evecs[:,m]) c n
(bulkprops.py) (Page 3/4) (May 22, 2024 18:01) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(#       \)) c n
(        ) p n
(     ) S
(#print\(v_p, ) c n
(      ) p
(#    chareq_christoffel\(vkap, c_stiff, rho, v_p\),) c n
(       ) p
(#   chareq_christoffel\(vkap, c_stiff, rho, v_p+dvel\)) c n
(        ) p
(#  \)) c n
() p n
(    ) N
(    ) S
(#print\('got vg', vg, np.sqrt\(np.linalg.norm\(vg\)\) \)) c n
(    ) p
(return) K
( v_vphase, v_evecs, v_vgroup) p n
(bulkprops.py) (Page 4/4) (May 22, 2024 18:01) title
border
grestore
(Printed by Michael Steel) rhead
(bulkprops.py) (2/2) (Wednesday May 22, 2024) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
