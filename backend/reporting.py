# Copyright (C) 2017-2025  Michael Steel.

# NumBAT is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import logging
import sys
import datetime

g_logger=None



def init_logger():
    global g_logger
    g_logger=logging.getLogger('NumBAT log')

def report(msg):
    if g_logger is None:
        init_logger()
    g_logger.warning(msg)

def report_and_exit(msg):
    if g_logger is None:
        init_logger()
    g_logger.error('\nFatal error: \n %s\n\n', msg)
#g_logger.error('from logger')
    sys.exit(1)


def assertion(assertion_ok, msg, severity='fatal'):
    if not assertion_ok:
        if severity == 'fatal':
            report_and_exit(f'NumBAT assertion failed: {msg}')
        else:
            report(f'NumBAT assertion failed: {msg}')

class NBWarnings(object):
    def __new__(cls):
        if not hasattr(cls, 'instance'):
            cls.instance = super(NBWarnings, cls).__new__(cls)
        return cls.instance

    def __init__(self) -> None:
        self._warnings=[]
        self._times=[]

    def add_warning(self, s):
        self._warnings.append(s)
        self._times.append(datetime.datetime.now())

    def report(self):

        if self._warnings:
            s='''\nThe following warnings were generated by NumBAT during this calculation:'''
            for iw,w in enumerate(self._warnings):
                s+=f'\nIn a calculation at {str(self._times[iw])}: {w}'
        else:
            s='''\nNo warnings were generated by NumBAT during this calculation.'''

        return s



# Create singleton
g_warnings=NBWarnings()

def report_warnings():
    return g_warnings.report()

# extenal function called from other files
def register_warning(s):
    g_warnings.add_warning(s)

    print(s)
